{"solidity/UpdaterManager.sol:Address":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207141f1afc9e5a642ce1a9586f24dcffa8545edab90962e84609b89039716ff8d64736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207141f1afc9e5a642ce1a9586f24dcffa8545edab90962e84609b89039716ff8d64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"103861:8061:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;103861:8061:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"103861:8061:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:AddressUpgradeable":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3558b6e608d17263852c1c566270479b5d9dee8796f8fc195d0e9252c471f4d64736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3558b6e608d17263852c1c566270479b5d9dee8796f8fc195d0e9252c471f4d64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"53678:7122:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;53678:7122:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"53678:7122:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Attestation":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220556cade2ceb7f10b02d17d7f9e33597eab7513f095de68b95e2eab1e24128d7864736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220556cade2ceb7f10b02d17d7f9e33597eab7513f095de68b95e2eab1e24128d7864736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"74198:3216:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;74198:3216:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"74198:3216:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_HOME_DOMAIN":{"details":"AttestationData memory layout [000 .. 004): homeDomain     uint32   4 bytes [004 .. 008): nonce          uint32   4 bytes [008 .. 040): root           bytes32 32 bytes      Attestation memory layout [000 .. 040): data           bytes   40 bytes (see above) [040 .. END): signature      bytes   ?? bytes (64/65 bytes)"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_HOME_DOMAIN\":{\"details\":\"AttestationData memory layout [000 .. 004): homeDomain     uint32   4 bytes [004 .. 008): nonce          uint32   4 bytes [008 .. 040): root           bytes32 32 bytes      Attestation memory layout [000 .. 040): data           bytes   40 bytes (see above) [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Attestation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Auth":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098bfa38d67ef108eda6616e428d3fc8c20c7202de53ac86efb808b5a9051833164736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098bfa38d67ef108eda6616e428d3fc8c20c7202de53ac86efb808b5a9051833164736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"77416:676:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;77416:676:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"77416:676:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Auth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:AuthManager":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"AuthManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:ContextUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:ECDSA":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bd835291aac13937835c005523d864b88d046a1737c21123338153401a579f064736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bd835291aac13937835c005523d864b88d046a1737c21123338153401a579f064736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"44612:8924:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;44612:8924:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"44612:8924:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Header":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200b2d9b552d0434e3fbad2e3e0c365245cf4507695a9ae602ae9b3a731dd1db4664736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200b2d9b552d0434e3fbad2e3e0c365245cf4507695a9ae602ae9b3a731dd1db4664736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"39328:3303:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;39328:3303:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"39328:3303:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_ORIGIN":{"details":"Header memory layout [000 .. 002): version            uint16   2 bytes [002 .. 006): originDomain       uint32   4 bytes [006 .. 038): sender             bytes32 32 bytes [038 .. 042): nonce              uint32   4 bytes [042 .. 046): destinationDomain  uint32   4 bytes [046 .. 078): recipient          bytes32 32 bytes [078 .. 082): optimisticSeconds  uint32   4 bytes"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_ORIGIN\":{\"details\":\"Header memory layout [000 .. 002): version            uint16   2 bytes [002 .. 006): originDomain       uint32   4 bytes [006 .. 038): sender             bytes32 32 bytes [038 .. 042): nonce              uint32   4 bytes [042 .. 046): destinationDomain  uint32   4 bytes [046 .. 078): recipient          bytes32 32 bytes [078 .. 082): optimisticSeconds  uint32   4 bytes\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Header\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Home":{"code":"0x60a06040523480156200001157600080fd5b506040516200382138038062003821833981016040819052620000349162000043565b63ffffffff1660805262000072565b6000602082840312156200005657600080fd5b815163ffffffff811681146200006b57600080fd5b9392505050565b60805161377e620000a36000396000818161027e0152818161054701528181610de50152611886015261377e6000f3fe6080604052600436106101805760003560e01c80639df6c8e1116100d6578063df034cd01161007f578063f7560e4011610059578063f7560e40146104a8578063fd54b228146104bb578063ffa1ad74146104d257600080fd5b8063df034cd014610446578063ebf0c71714610473578063f2fde38b1461048857600080fd5b8063c19d93fb116100b0578063c19d93fb146103b5578063c4d66de8146103f9578063ccbdf9c91461041957600080fd5b80639df6c8e114610341578063affed0e014610377578063b7bc563e1461039557600080fd5b80637ea97f40116101385780638da5cb5b116101125780638da5cb5b146102b55780639776120e146103015780639d54f4191461032157600080fd5b80637ea97f401461021c57806388a278ec1461023c5780638d3638f41461026c57600080fd5b806345630b1a1161016957806345630b1a146101da578063522ae002146101ef578063715018a61461020557600080fd5b806306661abd1461018557806336e104de146101a9575b600080fd5b34801561019157600080fd5b506020545b6040519081526020015b60405180910390f35b3480156101b557600080fd5b506101be6104f9565b6040805163ffffffff90931683526020830191909152016101a0565b3480156101e657600080fd5b50610196610540565b3480156101fb57600080fd5b5061019661080081565b34801561021157600080fd5b5061021a610570565b005b34801561022857600080fd5b50610196610237366004612f46565b6105de565b34801561024857600080fd5b5061025c61025736600461305b565b6105ff565b60405190151581526020016101a0565b34801561027857600080fd5b506102a07f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101a0565b3480156102c157600080fd5b5060855473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a0565b34801561030d57600080fd5b5061021a61031c3660046130ab565b61074e565b34801561032d57600080fd5b5061021a61033c3660046130ab565b6107c1565b34801561034d57600080fd5b5061011b546102dc90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561038357600080fd5b5061011b546102a09063ffffffff1681565b3480156103a157600080fd5b5061021a6103b03660046130ab565b610881565b3480156103c157600080fd5b5061011b546103ec907801000000000000000000000000000000000000000000000000900460ff1681565b6040516101a091906130f7565b34801561040557600080fd5b5061021a6104143660046130ab565b61092f565b34801561042557600080fd5b5060b8546102dc9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561045257600080fd5b5060b7546102dc9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561047f57600080fd5b50610196610af1565b34801561049457600080fd5b5061021a6104a33660046130ab565b610afd565b61021a6104b636600461314c565b610bf6565b3480156104c757600080fd5b506020546101969081565b3480156104de57600080fd5b506104e7600081565b60405160ff90911681526020016101a0565b6021546000908190801561053b5761051260018261320a565b925060218363ffffffff168154811061052d5761052d613221565b906000526020600020015491505b509091565b600061056b7f0000000000000000000000000000000000000000000000000000000000000000610ef0565b905090565b60855473ffffffffffffffffffffffffffffffffffffffff1633146105dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b565b602181815481106105ee57600080fd5b600091825260209091200154905081565b6000600261011b547801000000000000000000000000000000000000000000000000900460ff166002811115610637576106376130c8565b036106845760405162461bcd60e51b815260206004820152600c60248201527f6661696c6564207374617465000000000000000000000000000000000000000060448201526064016105d3565b60006106908484610f69565b905060006106a362ffffff198316611072565b905060006106b662ffffff198416611086565b60215490915063ffffffff831610156106ff5760218263ffffffff16815481106106e2576106e2613221565b906000526020600020015481036106ff5760009350505050610748565b61070761109b565b7f287e2c0e041ca31a0ce7a1ed8b91a7425b2520880947cdbe778c457ca4c48e5b86866040516107389291906132c6565b60405180910390a1600193505050505b92915050565b60855473ffffffffffffffffffffffffffffffffffffffff1633146107b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b6107be816111b6565b50565b61011b54640100000000900473ffffffffffffffffffffffffffffffffffffffff1633146108315760405162461bcd60e51b815260206004820152600f60248201527f21757064617465724d616e61676572000000000000000000000000000000000060448201526064016105d3565b61083a8161129e565b5061011b80547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000179055565b60855473ffffffffffffffffffffffffffffffffffffffff1633146108e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b60b880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061093b600161131d565b9050801561097057605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610979826111b6565b610a1361011b60049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df034cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e91906132f5565b611476565b61011b80547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000001790556021805460018101825560009182527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57001558015610aed57605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b600061056b6000611504565b60855473ffffffffffffffffffffffffffffffffffffffff163314610b645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b73ffffffffffffffffffffffffffffffffffffffff8116610bed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105d3565b6107be81611517565b600261011b547801000000000000000000000000000000000000000000000000900460ff166002811115610c2c57610c2c6130c8565b03610c795760405162461bcd60e51b815260206004820152600c60248201527f6661696c6564207374617465000000000000000000000000000000000000000060448201526064016105d3565b61080081511115610ccc5760405162461bcd60e51b815260206004820152600c60248201527f6d736720746f6f206c6f6e67000000000000000000000000000000000000000060448201526064016105d3565b34610ce4610cd98461158e565b62ffffff191661159b565b6bffffffffffffffffffffffff1614610d3f5760405162461bcd60e51b815260206004820152600560248201527f217469707300000000000000000000000000000000000000000000000000000060448201526064016105d3565b61011b54610d549063ffffffff166001613312565b61011b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff929092169190911790556000610d95856115fd565b61011b54604080517e0100000000000000000000000000000000000000000000000000000000000060208201527fffffffff000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060e090811b821660228401526026830186905293841b811660468301528a841b8116604a830152604e82018a90529288901b909216606e83015280518083036052018152607290920190529091506000610e5f82868661165c565b80516020820120909150610e72816116d7565b61011b5463ffffffff1660208a901b67ffffffff00000000161767ffffffffffffffff166001610ea160205490565b610eab919061320a565b827f718e547b45036b0526c0cd2f2e3de248b0e8c042c714ecfbee3f5811a5e6e7858986604051610edd92919061333a565b60405180910390a4505050505050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e083901b1660208201527f53594e000000000000000000000000000000000000000000000000000000000060248201526000906027015b604051602081830303815290604052805190602001209050919050565b6000610f758282611707565b905060286bffffffffffffffffffffffff601883901c1611610fd95760405162461bcd60e51b815260206004820152601260248201527f4e6f7420616e206174746573746174696f6e000000000000000000000000000060448201526064016105d3565b61100e83610fec62ffffff19841661172b565b611009610ffe62ffffff198616611740565b62ffffff1916611773565b6117c6565b61102661102062ffffff19831661186e565b84611882565b6107485760405162461bcd60e51b815260206004820152601860248201527f5369676e6572206973206e6f7420616e2075706461746572000000000000000060448201526064016105d3565b600061074862ffffff198316600480611923565b600061074862ffffff19831660086020611953565b61011b805478020000000000000000000000000000000000000000000000007fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff90911617908190556040517f5b3c2cbf00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff6401000000009092049190911690635b3c2cbf90602401600060405180830381600087803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505060b75460405133935073ffffffffffffffffffffffffffffffffffffffff90911691507f98064af315f26d7333ba107ba43a128ec74345f4d4e6f2549840fe092a1c8bce90600090a3565b73ffffffffffffffffffffffffffffffffffffffff81163b61121a5760405162461bcd60e51b815260206004820152601860248201527f21636f6e747261637420757064617465724d616e61676572000000000000000060448201526064016105d3565b61011b80547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1664010000000073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040519081527f958d788fb4c373604cd4c73aa8c592de127d0819b49bb4dc02c8ecd666e965bf9060200160405180910390a150565b60b7805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f0f20622a7af9e952a6fec654a196f29e04477b5d335772c26902bec35cc9f22a9101610ae4565b605254600090610100900460ff16156113bc578160ff1660011480156113425750303b155b6113b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105d3565b506000919050565b60525460ff8084169116106114395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105d3565b50605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b605254610100900460ff166114f35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6114fb611b11565b6107be8161129e565b600061074882611512611b96565b612057565b6085805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610748826002611707565b6000816115b160025b62ffffff1983169061211a565b506115bb8361221b565b6115c484612249565b6115cd8561226a565b6115d68661228b565b6115e0919061335f565b6115ea919061335f565b6115f4919061335f565b91505b50919050565b60007fffffffffffffffffffffffff0000000000000000000000000000000000000000821461162d573392915050565b6116356122ac565b507fffffffffffffffffffffffff0000000000000000000000000000000000000000919050565b825160609060009061167060046002613386565b60ff1661167d91906133af565b9050600084518261168e91906133af565b9050600161169e60046002613386565b60ff1683838989896040516020016116bc97969594939291906133cc565b604051602081830303815290604052925050505b9392505050565b6116e2600082612313565b60216116ee6000611504565b8154600181018355600092835260209092209091015550565b81516000906020840161172264ffffffffff85168284612436565b95945050505050565b600061074862ffffff1983168260288161247d565b6000610748602861176381601886901c6bffffffffffffffffffffffff1661320a565b62ffffff1985169190600061247d565b60606000806117908460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060405191508192506117b58483602001612503565b508181016020016040529052919050565b60006117d762ffffff1984166126a8565b90506117e281612705565b90508373ffffffffffffffffffffffffffffffffffffffff166118058284612740565b73ffffffffffffffffffffffffffffffffffffffff16146118685760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016105d3565b50505050565b600061074862ffffff198316826004611923565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff16146118ff5760405162461bcd60e51b815260206004820152600c60248201527f57726f6e6720646f6d61696e000000000000000000000000000000000000000060448201526064016105d3565b5060b75473ffffffffffffffffffffffffffffffffffffffff908116911614919050565b600061193082602061346a565b61193b906008613386565b60ff16611949858585611953565b901c949350505050565b60008160ff16600003611968575060006116d0565b6119808460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1661199b60ff84168561348d565b1115611a13576119fa6119bc8560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff166119e28660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff16612764565b60405162461bcd60e51b81526004016105d391906134a5565b60208260ff161115611a8d5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016105d3565b600882026000611aab8660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b605254610100900460ff16611b8e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6105dc6127d2565b611b9e612f27565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b602081101561211257600182821c8116908190036120be5785826020811061208b5761208b613221565b01546040805160208101929092528101859052606001604051602081830303815290604052805190602001209350612109565b838583602081106120d1576120d1613221565b60200201516040516020016120f0929190918252602082015260400190565b6040516020818303038152906040528051906020012093505b50600101612061565b505092915050565b60006121268383612858565b6122145760006121456121398560d81c90565b64ffffffffff1661287b565b915050600061215a8464ffffffffff1661287b565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016105d391906134a5565b5090919050565b60008161222860026115a4565b5061223c62ffffff1984166026600c611923565b63ffffffff169392505050565b60008161225660026115a4565b5061223c62ffffff198416601a600c611923565b60008161227760026115a4565b5061223c62ffffff198416600e600c611923565b60008161229860026115a4565b5061223c62ffffff1984166002600c611923565b60b85473ffffffffffffffffffffffffffffffffffffffff1633146105dc5760405162461bcd60e51b815260206004820152601060248201527f2173797374656d4d657373656e6765720000000000000000000000000000000060448201526064016105d3565b602080830154906001906123289060026135d0565b612332919061320a565b81106123805760405162461bcd60e51b815260206004820152601060248201527f6d65726b6c6520747265652066756c6c0000000000000000000000000000000060448201526064016105d3565b6001016020830181905560005b602081101561242857816001166001036123bc57828482602081106123b4576123b4613221565b015550505050565b8381602081106123ce576123ce613221565b01546040805160208101929092528101849052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209250600191821c910161238d565b506124316135dc565b505050565b600080612443838561348d565b9050604051811115612453575060005b806000036124685762ffffff199150506116d0565b5050606092831b9190911790911b1760181b90565b6000806124988660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506124b186612965565b846124bc878461348d565b6124c6919061348d565b11156124d95762ffffff199150506124fb565b6124e3858261348d565b90506124f78364ffffffffff168286612436565b9150505b949350505050565b600062ffffff19808416036125805760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201527f657220646572656600000000000000000000000000000000000000000000000060648201526084016105d3565b612589836129ad565b6125fb5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201527f696e74657220646572656600000000000000000000000000000000000000000060648201526084016105d3565b60006126158460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169050600061263f8560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006040519050848111156126645760206060fd5b8285848460045afa5061269e61267a8760d81c90565b70ffffffffff000000000000000000000000606091821b168717901b841760181b90565b9695505050505050565b6000806126c38360781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006126ed8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610f4c565b600080600061274f85856129ea565b9150915061275c81612a58565b509392505050565b606060006127718661287b565b915050600061277f8661287b565b915050600061278d8661287b565b915050600061279b8661287b565b915050838383836040516020016127b5949392919061360b565b604051602081830303815290604052945050505050949350505050565b605254610100900460ff1661284f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6105dc33611517565b60008164ffffffffff1661286c8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156128ee57600061289a826008613386565b60ff1685901c90506128ab81612c44565b61ffff16841793508160ff166010146128c657601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01612881565b50600f5b60ff8160ff16101561295f57600061290b826008613386565b60ff1685901c905061291c81612c44565b61ffff16831792508160ff1660001461293757601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016128f2565b50915091565b600061297f8260181c6bffffffffffffffffffffffff1690565b6129978360781c6bffffffffffffffffffffffff1690565b016bffffffffffffffffffffffff169050919050565b60006129b98260d81c90565b64ffffffffff1664ffffffffff036129d357506000919050565b60006129de83612965565b60405110199392505050565b6000808251604103612a205760208301516040840151606085015160001a612a1487828585612c76565b94509450505050612a51565b8251604003612a495760208301516040840151612a3e868383612d8e565b935093505050612a51565b506000905060025b9250929050565b6000816004811115612a6c57612a6c6130c8565b03612a745750565b6001816004811115612a8857612a886130c8565b03612ad55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105d3565b6002816004811115612ae957612ae96130c8565b03612b365760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105d3565b6003816004811115612b4a57612b4a6130c8565b03612bbd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b6004816004811115612bd157612bd16130c8565b036107be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b6000612c5660048360ff16901c612de0565b60ff1661ffff919091161760081b612c6d82612de0565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612cad5750600090506003612d85565b8460ff16601b14158015612cc557508460ff16601c14155b15612cd65750600090506004612d85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d2a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612d7e57600060019250925050612d85565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612dc460ff86901c601b61348d565b9050612dd287828885612c76565b935093505050935093915050565b600060f08083179060ff82169003612dfb5750603092915050565b8060ff1660f103612e0f5750603192915050565b8060ff1660f203612e235750603292915050565b8060ff1660f303612e375750603392915050565b8060ff1660f403612e4b5750603492915050565b8060ff1660f503612e5f5750603592915050565b8060ff1660f603612e735750603692915050565b8060ff1660f703612e875750603792915050565b8060ff1660f803612e9b5750603892915050565b8060ff1660f903612eaf5750603992915050565b8060ff1660fa03612ec35750606192915050565b8060ff1660fb03612ed75750606292915050565b8060ff1660fc03612eeb5750606392915050565b8060ff1660fd03612eff5750606492915050565b8060ff1660fe03612f135750606592915050565b8060ff1660ff036115f75750606692915050565b6040518061040001604052806020906020820280368337509192915050565b600060208284031215612f5857600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146107be57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112612fc157600080fd5b813567ffffffffffffffff80821115612fdc57612fdc612f81565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561302257613022612f81565b8160405283815286602085880101111561303b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561306e57600080fd5b823561307981612f5f565b9150602083013567ffffffffffffffff81111561309557600080fd5b6130a185828601612fb0565b9150509250929050565b6000602082840312156130bd57600080fd5b81356116d081612f5f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310613132577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b803563ffffffff8116811461147157600080fd5b600080600080600060a0868803121561316457600080fd5b61316d86613138565b94506020860135935061318260408701613138565b9250606086013567ffffffffffffffff8082111561319f57600080fd5b6131ab89838a01612fb0565b935060808801359150808211156131c157600080fd5b506131ce88828901612fb0565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561321c5761321c6131db565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b8381101561326b578181015183820152602001613253565b838111156118685750506000910152565b60008151808452613294816020860160208601613250565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006124fb604083018461327c565b60006020828403121561330757600080fd5b81516116d081612f5f565b600063ffffffff808316818516808303821115613331576133316131db565b01949350505050565b60408152600061334d604083018561327c565b8281036020840152611722818561327c565b60006bffffffffffffffffffffffff808316818516808303821115613331576133316131db565b600060ff821660ff84168160ff04811182151516156133a7576133a76131db565b029392505050565b600061ffff808316818516808303821115613331576133316131db565b60007fffff000000000000000000000000000000000000000000000000000000000000808a60f01b168352808960f01b166002840152808860f01b166004840152808760f01b16600684015250845161342c816008850160208901613250565b845190830190613443816008840160208901613250565b8451910190613459816008840160208801613250565b016008019998505050505050505050565b600060ff821660ff841680821015613484576134846131db565b90039392505050565b600082198211156134a0576134a06131db565b500190565b6020815260006116d0602083018461327c565b600181815b8085111561351157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156134f7576134f76131db565b8085161561350457918102915b93841c93908002906134bd565b509250929050565b60008261352857506001610748565b8161353557506000610748565b816001811461354b576002811461355557613571565b6001915050610748565b60ff841115613566576135666131db565b50506001821b610748565b5060208310610133831016604e8410600b8410161715613594575081810a610748565b61359e83836134b8565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156133a7576133a76131db565b60006116d08383613519565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686581527f20766965772e20536c696365206973206174203078000000000000000000000060208201527fffffffffffff000000000000000000000000000000000000000000000000000060d086811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060508501527f7800000000000000000000000000000000000000000000000000000000000000607085015285821b83166071850152607784015283901b1660868201527f2e00000000000000000000000000000000000000000000000000000000000000608c8201526000608d820161269e56fea2646970667358221220eb459df0d1daab874e8c492165d8e3ecfa90d0dae8a322db66044aa9682f512164736f6c634300080d0033","runtime-code":"0x6080604052600436106101805760003560e01c80639df6c8e1116100d6578063df034cd01161007f578063f7560e4011610059578063f7560e40146104a8578063fd54b228146104bb578063ffa1ad74146104d257600080fd5b8063df034cd014610446578063ebf0c71714610473578063f2fde38b1461048857600080fd5b8063c19d93fb116100b0578063c19d93fb146103b5578063c4d66de8146103f9578063ccbdf9c91461041957600080fd5b80639df6c8e114610341578063affed0e014610377578063b7bc563e1461039557600080fd5b80637ea97f40116101385780638da5cb5b116101125780638da5cb5b146102b55780639776120e146103015780639d54f4191461032157600080fd5b80637ea97f401461021c57806388a278ec1461023c5780638d3638f41461026c57600080fd5b806345630b1a1161016957806345630b1a146101da578063522ae002146101ef578063715018a61461020557600080fd5b806306661abd1461018557806336e104de146101a9575b600080fd5b34801561019157600080fd5b506020545b6040519081526020015b60405180910390f35b3480156101b557600080fd5b506101be6104f9565b6040805163ffffffff90931683526020830191909152016101a0565b3480156101e657600080fd5b50610196610540565b3480156101fb57600080fd5b5061019661080081565b34801561021157600080fd5b5061021a610570565b005b34801561022857600080fd5b50610196610237366004612f46565b6105de565b34801561024857600080fd5b5061025c61025736600461305b565b6105ff565b60405190151581526020016101a0565b34801561027857600080fd5b506102a07f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101a0565b3480156102c157600080fd5b5060855473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a0565b34801561030d57600080fd5b5061021a61031c3660046130ab565b61074e565b34801561032d57600080fd5b5061021a61033c3660046130ab565b6107c1565b34801561034d57600080fd5b5061011b546102dc90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561038357600080fd5b5061011b546102a09063ffffffff1681565b3480156103a157600080fd5b5061021a6103b03660046130ab565b610881565b3480156103c157600080fd5b5061011b546103ec907801000000000000000000000000000000000000000000000000900460ff1681565b6040516101a091906130f7565b34801561040557600080fd5b5061021a6104143660046130ab565b61092f565b34801561042557600080fd5b5060b8546102dc9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561045257600080fd5b5060b7546102dc9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561047f57600080fd5b50610196610af1565b34801561049457600080fd5b5061021a6104a33660046130ab565b610afd565b61021a6104b636600461314c565b610bf6565b3480156104c757600080fd5b506020546101969081565b3480156104de57600080fd5b506104e7600081565b60405160ff90911681526020016101a0565b6021546000908190801561053b5761051260018261320a565b925060218363ffffffff168154811061052d5761052d613221565b906000526020600020015491505b509091565b600061056b7f0000000000000000000000000000000000000000000000000000000000000000610ef0565b905090565b60855473ffffffffffffffffffffffffffffffffffffffff1633146105dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b565b602181815481106105ee57600080fd5b600091825260209091200154905081565b6000600261011b547801000000000000000000000000000000000000000000000000900460ff166002811115610637576106376130c8565b036106845760405162461bcd60e51b815260206004820152600c60248201527f6661696c6564207374617465000000000000000000000000000000000000000060448201526064016105d3565b60006106908484610f69565b905060006106a362ffffff198316611072565b905060006106b662ffffff198416611086565b60215490915063ffffffff831610156106ff5760218263ffffffff16815481106106e2576106e2613221565b906000526020600020015481036106ff5760009350505050610748565b61070761109b565b7f287e2c0e041ca31a0ce7a1ed8b91a7425b2520880947cdbe778c457ca4c48e5b86866040516107389291906132c6565b60405180910390a1600193505050505b92915050565b60855473ffffffffffffffffffffffffffffffffffffffff1633146107b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b6107be816111b6565b50565b61011b54640100000000900473ffffffffffffffffffffffffffffffffffffffff1633146108315760405162461bcd60e51b815260206004820152600f60248201527f21757064617465724d616e61676572000000000000000000000000000000000060448201526064016105d3565b61083a8161129e565b5061011b80547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000179055565b60855473ffffffffffffffffffffffffffffffffffffffff1633146108e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b60b880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061093b600161131d565b9050801561097057605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610979826111b6565b610a1361011b60049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df034cd06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e91906132f5565b611476565b61011b80547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000001790556021805460018101825560009182527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b57001558015610aed57605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b600061056b6000611504565b60855473ffffffffffffffffffffffffffffffffffffffff163314610b645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b73ffffffffffffffffffffffffffffffffffffffff8116610bed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105d3565b6107be81611517565b600261011b547801000000000000000000000000000000000000000000000000900460ff166002811115610c2c57610c2c6130c8565b03610c795760405162461bcd60e51b815260206004820152600c60248201527f6661696c6564207374617465000000000000000000000000000000000000000060448201526064016105d3565b61080081511115610ccc5760405162461bcd60e51b815260206004820152600c60248201527f6d736720746f6f206c6f6e67000000000000000000000000000000000000000060448201526064016105d3565b34610ce4610cd98461158e565b62ffffff191661159b565b6bffffffffffffffffffffffff1614610d3f5760405162461bcd60e51b815260206004820152600560248201527f217469707300000000000000000000000000000000000000000000000000000060448201526064016105d3565b61011b54610d549063ffffffff166001613312565b61011b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff929092169190911790556000610d95856115fd565b61011b54604080517e0100000000000000000000000000000000000000000000000000000000000060208201527fffffffff000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060e090811b821660228401526026830186905293841b811660468301528a841b8116604a830152604e82018a90529288901b909216606e83015280518083036052018152607290920190529091506000610e5f82868661165c565b80516020820120909150610e72816116d7565b61011b5463ffffffff1660208a901b67ffffffff00000000161767ffffffffffffffff166001610ea160205490565b610eab919061320a565b827f718e547b45036b0526c0cd2f2e3de248b0e8c042c714ecfbee3f5811a5e6e7858986604051610edd92919061333a565b60405180910390a4505050505050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e083901b1660208201527f53594e000000000000000000000000000000000000000000000000000000000060248201526000906027015b604051602081830303815290604052805190602001209050919050565b6000610f758282611707565b905060286bffffffffffffffffffffffff601883901c1611610fd95760405162461bcd60e51b815260206004820152601260248201527f4e6f7420616e206174746573746174696f6e000000000000000000000000000060448201526064016105d3565b61100e83610fec62ffffff19841661172b565b611009610ffe62ffffff198616611740565b62ffffff1916611773565b6117c6565b61102661102062ffffff19831661186e565b84611882565b6107485760405162461bcd60e51b815260206004820152601860248201527f5369676e6572206973206e6f7420616e2075706461746572000000000000000060448201526064016105d3565b600061074862ffffff198316600480611923565b600061074862ffffff19831660086020611953565b61011b805478020000000000000000000000000000000000000000000000007fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff90911617908190556040517f5b3c2cbf00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff6401000000009092049190911690635b3c2cbf90602401600060405180830381600087803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505060b75460405133935073ffffffffffffffffffffffffffffffffffffffff90911691507f98064af315f26d7333ba107ba43a128ec74345f4d4e6f2549840fe092a1c8bce90600090a3565b73ffffffffffffffffffffffffffffffffffffffff81163b61121a5760405162461bcd60e51b815260206004820152601860248201527f21636f6e747261637420757064617465724d616e61676572000000000000000060448201526064016105d3565b61011b80547fffffffffffffffff0000000000000000000000000000000000000000ffffffff1664010000000073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040519081527f958d788fb4c373604cd4c73aa8c592de127d0819b49bb4dc02c8ecd666e965bf9060200160405180910390a150565b60b7805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f0f20622a7af9e952a6fec654a196f29e04477b5d335772c26902bec35cc9f22a9101610ae4565b605254600090610100900460ff16156113bc578160ff1660011480156113425750303b155b6113b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105d3565b506000919050565b60525460ff8084169116106114395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105d3565b50605280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b605254610100900460ff166114f35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6114fb611b11565b6107be8161129e565b600061074882611512611b96565b612057565b6085805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610748826002611707565b6000816115b160025b62ffffff1983169061211a565b506115bb8361221b565b6115c484612249565b6115cd8561226a565b6115d68661228b565b6115e0919061335f565b6115ea919061335f565b6115f4919061335f565b91505b50919050565b60007fffffffffffffffffffffffff0000000000000000000000000000000000000000821461162d573392915050565b6116356122ac565b507fffffffffffffffffffffffff0000000000000000000000000000000000000000919050565b825160609060009061167060046002613386565b60ff1661167d91906133af565b9050600084518261168e91906133af565b9050600161169e60046002613386565b60ff1683838989896040516020016116bc97969594939291906133cc565b604051602081830303815290604052925050505b9392505050565b6116e2600082612313565b60216116ee6000611504565b8154600181018355600092835260209092209091015550565b81516000906020840161172264ffffffffff85168284612436565b95945050505050565b600061074862ffffff1983168260288161247d565b6000610748602861176381601886901c6bffffffffffffffffffffffff1661320a565b62ffffff1985169190600061247d565b60606000806117908460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060405191508192506117b58483602001612503565b508181016020016040529052919050565b60006117d762ffffff1984166126a8565b90506117e281612705565b90508373ffffffffffffffffffffffffffffffffffffffff166118058284612740565b73ffffffffffffffffffffffffffffffffffffffff16146118685760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016105d3565b50505050565b600061074862ffffff198316826004611923565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff16146118ff5760405162461bcd60e51b815260206004820152600c60248201527f57726f6e6720646f6d61696e000000000000000000000000000000000000000060448201526064016105d3565b5060b75473ffffffffffffffffffffffffffffffffffffffff908116911614919050565b600061193082602061346a565b61193b906008613386565b60ff16611949858585611953565b901c949350505050565b60008160ff16600003611968575060006116d0565b6119808460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1661199b60ff84168561348d565b1115611a13576119fa6119bc8560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff166119e28660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff16612764565b60405162461bcd60e51b81526004016105d391906134a5565b60208260ff161115611a8d5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016105d3565b600882026000611aab8660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b605254610100900460ff16611b8e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6105dc6127d2565b611b9e612f27565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b602081101561211257600182821c8116908190036120be5785826020811061208b5761208b613221565b01546040805160208101929092528101859052606001604051602081830303815290604052805190602001209350612109565b838583602081106120d1576120d1613221565b60200201516040516020016120f0929190918252602082015260400190565b6040516020818303038152906040528051906020012093505b50600101612061565b505092915050565b60006121268383612858565b6122145760006121456121398560d81c90565b64ffffffffff1661287b565b915050600061215a8464ffffffffff1661287b565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016105d391906134a5565b5090919050565b60008161222860026115a4565b5061223c62ffffff1984166026600c611923565b63ffffffff169392505050565b60008161225660026115a4565b5061223c62ffffff198416601a600c611923565b60008161227760026115a4565b5061223c62ffffff198416600e600c611923565b60008161229860026115a4565b5061223c62ffffff1984166002600c611923565b60b85473ffffffffffffffffffffffffffffffffffffffff1633146105dc5760405162461bcd60e51b815260206004820152601060248201527f2173797374656d4d657373656e6765720000000000000000000000000000000060448201526064016105d3565b602080830154906001906123289060026135d0565b612332919061320a565b81106123805760405162461bcd60e51b815260206004820152601060248201527f6d65726b6c6520747265652066756c6c0000000000000000000000000000000060448201526064016105d3565b6001016020830181905560005b602081101561242857816001166001036123bc57828482602081106123b4576123b4613221565b015550505050565b8381602081106123ce576123ce613221565b01546040805160208101929092528101849052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209250600191821c910161238d565b506124316135dc565b505050565b600080612443838561348d565b9050604051811115612453575060005b806000036124685762ffffff199150506116d0565b5050606092831b9190911790911b1760181b90565b6000806124988660781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506124b186612965565b846124bc878461348d565b6124c6919061348d565b11156124d95762ffffff199150506124fb565b6124e3858261348d565b90506124f78364ffffffffff168286612436565b9150505b949350505050565b600062ffffff19808416036125805760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201527f657220646572656600000000000000000000000000000000000000000000000060648201526084016105d3565b612589836129ad565b6125fb5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201527f696e74657220646572656600000000000000000000000000000000000000000060648201526084016105d3565b60006126158460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169050600061263f8560781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006040519050848111156126645760206060fd5b8285848460045afa5061269e61267a8760d81c90565b70ffffffffff000000000000000000000000606091821b168717901b841760181b90565b9695505050505050565b6000806126c38360781c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006126ed8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610f4c565b600080600061274f85856129ea565b9150915061275c81612a58565b509392505050565b606060006127718661287b565b915050600061277f8661287b565b915050600061278d8661287b565b915050600061279b8661287b565b915050838383836040516020016127b5949392919061360b565b604051602081830303815290604052945050505050949350505050565b605254610100900460ff1661284f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105d3565b6105dc33611517565b60008164ffffffffff1661286c8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156128ee57600061289a826008613386565b60ff1685901c90506128ab81612c44565b61ffff16841793508160ff166010146128c657601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01612881565b50600f5b60ff8160ff16101561295f57600061290b826008613386565b60ff1685901c905061291c81612c44565b61ffff16831792508160ff1660001461293757601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016128f2565b50915091565b600061297f8260181c6bffffffffffffffffffffffff1690565b6129978360781c6bffffffffffffffffffffffff1690565b016bffffffffffffffffffffffff169050919050565b60006129b98260d81c90565b64ffffffffff1664ffffffffff036129d357506000919050565b60006129de83612965565b60405110199392505050565b6000808251604103612a205760208301516040840151606085015160001a612a1487828585612c76565b94509450505050612a51565b8251604003612a495760208301516040840151612a3e868383612d8e565b935093505050612a51565b506000905060025b9250929050565b6000816004811115612a6c57612a6c6130c8565b03612a745750565b6001816004811115612a8857612a886130c8565b03612ad55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105d3565b6002816004811115612ae957612ae96130c8565b03612b365760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105d3565b6003816004811115612b4a57612b4a6130c8565b03612bbd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b6004816004811115612bd157612bd16130c8565b036107be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b6000612c5660048360ff16901c612de0565b60ff1661ffff919091161760081b612c6d82612de0565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612cad5750600090506003612d85565b8460ff16601b14158015612cc557508460ff16601c14155b15612cd65750600090506004612d85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612d2a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612d7e57600060019250925050612d85565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612dc460ff86901c601b61348d565b9050612dd287828885612c76565b935093505050935093915050565b600060f08083179060ff82169003612dfb5750603092915050565b8060ff1660f103612e0f5750603192915050565b8060ff1660f203612e235750603292915050565b8060ff1660f303612e375750603392915050565b8060ff1660f403612e4b5750603492915050565b8060ff1660f503612e5f5750603592915050565b8060ff1660f603612e735750603692915050565b8060ff1660f703612e875750603792915050565b8060ff1660f803612e9b5750603892915050565b8060ff1660f903612eaf5750603992915050565b8060ff1660fa03612ec35750606192915050565b8060ff1660fb03612ed75750606292915050565b8060ff1660fc03612eeb5750606392915050565b8060ff1660fd03612eff5750606492915050565b8060ff1660fe03612f135750606592915050565b8060ff1660ff036115f75750606692915050565b6040518061040001604052806020906020820280368337509192915050565b600060208284031215612f5857600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146107be57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112612fc157600080fd5b813567ffffffffffffffff80821115612fdc57612fdc612f81565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561302257613022612f81565b8160405283815286602085880101111561303b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561306e57600080fd5b823561307981612f5f565b9150602083013567ffffffffffffffff81111561309557600080fd5b6130a185828601612fb0565b9150509250929050565b6000602082840312156130bd57600080fd5b81356116d081612f5f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310613132577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b803563ffffffff8116811461147157600080fd5b600080600080600060a0868803121561316457600080fd5b61316d86613138565b94506020860135935061318260408701613138565b9250606086013567ffffffffffffffff8082111561319f57600080fd5b6131ab89838a01612fb0565b935060808801359150808211156131c157600080fd5b506131ce88828901612fb0565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561321c5761321c6131db565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b8381101561326b578181015183820152602001613253565b838111156118685750506000910152565b60008151808452613294816020860160208601613250565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006124fb604083018461327c565b60006020828403121561330757600080fd5b81516116d081612f5f565b600063ffffffff808316818516808303821115613331576133316131db565b01949350505050565b60408152600061334d604083018561327c565b8281036020840152611722818561327c565b60006bffffffffffffffffffffffff808316818516808303821115613331576133316131db565b600060ff821660ff84168160ff04811182151516156133a7576133a76131db565b029392505050565b600061ffff808316818516808303821115613331576133316131db565b60007fffff000000000000000000000000000000000000000000000000000000000000808a60f01b168352808960f01b166002840152808860f01b166004840152808760f01b16600684015250845161342c816008850160208901613250565b845190830190613443816008840160208901613250565b8451910190613459816008840160208801613250565b016008019998505050505050505050565b600060ff821660ff841680821015613484576134846131db565b90039392505050565b600082198211156134a0576134a06131db565b500190565b6020815260006116d0602083018461327c565b600181815b8085111561351157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156134f7576134f76131db565b8085161561350457918102915b93841c93908002906134bd565b509250929050565b60008261352857506001610748565b8161353557506000610748565b816001811461354b576002811461355557613571565b6001915050610748565b60ff841115613566576135666131db565b50506001821b610748565b5060208310610133831016604e8410600b8410161715613594575081810a610748565b61359e83836134b8565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156133a7576133a76131db565b60006116d08383613519565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686581527f20766965772e20536c696365206973206174203078000000000000000000000060208201527fffffffffffff000000000000000000000000000000000000000000000000000060d086811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060508501527f7800000000000000000000000000000000000000000000000000000000000000607085015285821b83166071850152607784015283901b1660868201527f2e00000000000000000000000000000000000000000000000000000000000000608c8201526000608d820161269e56fea2646970667358221220eb459df0d1daab874e8c492165d8e3ecfa90d0dae8a322db66044aa9682f512164736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"111924:12878:0:-:0;;;114954:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;71739:26;;;;111924:12878;;14:280:1;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:1:o;:::-;111924:12878:0;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"111924:12878:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103496:81;;;;;;;;;;-1:-1:-1;103560:10:0;;103496:81;;;160:25:1;;;148:2;133:18;103496:81:0;;;;;;;;119202:257;;;;;;;;;;;;;:::i;:::-;;;;398:10:1;386:23;;;368:42;;441:2;426:18;;419:34;;;;341:18;119202:257:0;196:263:1;119540:106:0;;;;;;;;;;;;;:::i;112806:58::-;;;;;;;;;;;;112855:9;112806:58;;74110:84;;;;;;;;;;;;;:::i;:::-;;103040:32;;;;;;;;;;-1:-1:-1;103040:32:0;;;;;:::i;:::-;;:::i;121003:812::-;;;;;;;;;;-1:-1:-1;121003:812:0;;;;;:::i;:::-;;:::i;:::-;;;2586:14:1;;2579:22;2561:41;;2549:2;2534:18;121003:812:0;2421:187:1;70537:35:0;;;;;;;;;;;;;;;;;;2787:10:1;2775:23;;;2757:42;;2745:2;2730:18;70537:35:0;2613:192:1;68634:85:0;;;;;;;;;;-1:-1:-1;68706:6:0;;;;68634:85;;;2986:42:1;2974:55;;;2956:74;;2944:2;2929:18;68634:85:0;2810:226:1;116843:140:0;;;;;;;;;;-1:-1:-1;116843:140:0;;;;;:::i;:::-;;:::i;116204:220::-;;;;;;;;;;-1:-1:-1;116204:220:0;;;;;:::i;:::-;;:::i;113079:37::-;;;;;;;;;;-1:-1:-1;113079:37:0;;;;;;;;;;;112983:19;;;;;;;;;;-1:-1:-1;112983:19:0;;;;;;;;72288:133;;;;;;;;;;-1:-1:-1;72288:133:0;;;;;:::i;:::-;;:::i;113155:19::-;;;;;;;;;;-1:-1:-1;113155:19:0;;;;;;;;;;;;;;;;;;:::i;115110:394::-;;;;;;;;;;-1:-1:-1;115110:394:0;;;;;:::i;:::-;;:::i;70692:39::-;;;;;;;;;;-1:-1:-1;70692:39:0;;;;;;;;70663:22;;;;;;;;;;-1:-1:-1;70663:22:0;;;;;;;;103312:81;;;;;;;;;;;;;:::i;69516:198::-;;;;;;;;;;-1:-1:-1;69516:198:0;;;;;:::i;:::-;;:::i;117489:1473::-;;;;;;:::i;:::-;;:::i;103008:26::-;;;;;;;;;;-1:-1:-1;103008:26:0;;;;;;201:33;;;;;;;;;;;;233:1;201:33;;;;;6037:4:1;6025:17;;;6007:36;;5995:2;5980:18;201:33:0;5865:184:1;119202:257:0;119307:15;:22;119250:13;;;;119343:11;;119339:114;;119386:10;119395:1;119386:6;:10;:::i;:::-;119370:27;;119419:15;119435:6;119419:23;;;;;;;;;;:::i;:::-;;;;;;;;;119411:31;;119339:114;119280:179;119202:257;;:::o;119540:106::-;119589:7;119615:24;119627:11;119615;:24::i;:::-;119608:31;;119540:106;:::o;74110:84::-;68706:6;;68846:23;68706:6;67634:10;68846:23;68838:68;;;;-1:-1:-1;;;68838:68:0;;6764:2:1;68838:68:0;;;6746:21:1;;;6783:18;;;6776:30;6842:34;6822:18;;;6815:62;6894:18;;68838:68:0;;;;;;;;;74110:84::o;103040:32::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;103040:32:0;:::o;121003:812::-;121127:4;115922:13;115913:5;;;;;;;:22;;;;;;;;:::i;:::-;;115905:47;;;;-1:-1:-1;;;115905:47:0;;7125:2:1;115905:47:0;;;7107:21:1;7164:2;7144:18;;;7137:30;7203:14;7183:18;;;7176:42;7235:18;;115905:47:0;6923:336:1;115905:47:0;121201:13:::1;121217:41;121235:8;121245:12;121217:17;:41::i;:::-;121201:57:::0;-1:-1:-1;121268:13:0::1;121284:24;-1:-1:-1::0;;121284:22:0;::::1;;:24::i;:::-;121268:40:::0;-1:-1:-1;121318:13:0::1;121334:23;-1:-1:-1::0;;121334:21:0;::::1;;:23::i;:::-;121442:15;:22:::0;121318:39;;-1:-1:-1;121433:31:0::1;::::0;::::1;;121429:284;;;121493:15;121509:6;121493:23;;;;;;;;;;:::i;:::-;;;;;;;;;121484:5;:32:::0;121480:139:::1;;121599:5;121592:12;;;;;;;121480:139;121722:7;:5;:7::i;:::-;121744:43;121764:8;121774:12;121744:43;;;;;;;:::i;:::-;;;;;;;;121804:4;121797:11;;;;;115962:1;121003:812:::0;;;;:::o;116843:140::-;68706:6;;68846:23;68706:6;67634:10;68846:23;68838:68;;;;-1:-1:-1;;;68838:68:0;;6764:2:1;68838:68:0;;;6746:21:1;;;6783:18;;;6776:30;6842:34;6822:18;;;6815:62;6894:18;;68838:68:0;6562:356:1;68838:68:0;116924:52:::1;116959:15;116924:18;:52::i;:::-;116843:140:::0;:::o;116204:220::-;115718:14;;;;;;;115696:10;:37;115688:65;;;;-1:-1:-1;;;115688:65:0;;8392:2:1;115688:65:0;;;8374:21:1;8431:2;8411:18;;;8404:30;8470:17;8450:18;;;8443:45;8505:18;;115688:65:0;8190:339:1;115688:65:0;116280:21:::1;116292:8;116280:11;:21::i;:::-;-1:-1:-1::0;116396:5:0::1;:21:::0;;;::::1;::::0;::::1;::::0;;116204:220::o;72288:133::-;68706:6;;68846:23;68706:6;67634:10;68846:23;68838:68;;;;-1:-1:-1;;;68838:68:0;;6764:2:1;68838:68:0;;;6746:21:1;;;6783:18;;;6776:30;6842:34;6822:18;;;6815:62;6894:18;;68838:68:0;6562:356:1;68838:68:0;72380:15:::1;:34:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;72288:133::o;115110:394::-;61530:19;61552:25;61575:1;61552:22;:25::i;:::-;61530:47;;61591:14;61587:65;;;61621:13;:20;;;;;;;;61587:65;115257:35:::1;115276:15;115257:18;:35::i;:::-;115302:50;115327:14;;;;;;;;;;;:22;;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;115302;:50::i;:::-;115362:5;:21:::0;;;::::1;::::0;::::1;::::0;;115464:15:::1;:33:::0;;-1:-1:-1;115464:33:0;::::1;::::0;;-1:-1:-1;115464:33:0;;;;::::1;::::0;61672:99;;;;61706:13;:21;;;;;;61746:14;;-1:-1:-1;6007:36:1;;61746:14:0;;5995:2:1;5980:18;61746:14:0;;;;;;;;61672:99;61520:257;115110:394;:::o;103312:81::-;103349:7;103375:11;:4;:9;:11::i;69516:198::-;68706:6;;68846:23;68706:6;67634:10;68846:23;68838:68;;;;-1:-1:-1;;;68838:68:0;;6764:2:1;68838:68:0;;;6746:21:1;;;6783:18;;;6776:30;6842:34;6822:18;;;6815:62;6894:18;;68838:68:0;6562:356:1;68838:68:0;69604:22:::1;::::0;::::1;69596:73;;;::::0;-1:-1:-1;;;69596:73:0;;9191:2:1;69596:73:0::1;::::0;::::1;9173:21:1::0;9230:2;9210:18;;;9203:30;9269:34;9249:18;;;9242:62;9340:8;9320:18;;;9313:36;9366:19;;69596:73:0::1;8989:402:1::0;69596:73:0::1;69679:28;69698:8;69679:18;:28::i;117489:1473::-:0;115922:13;115913:5;;;;;;;:22;;;;;;;;:::i;:::-;;115905:47;;;;-1:-1:-1;;;115905:47:0;;7125:2:1;115905:47:0;;;7107:21:1;7164:2;7144:18;;;7137:30;7203:14;7183:18;;;7176:42;7235:18;;115905:47:0;6923:336:1;115905:47:0;112855:9:::1;117726:12;:19;:45;;117718:70;;;::::0;-1:-1:-1;;;117718:70:0;;9598:2:1;117718:70:0::1;::::0;::::1;9580:21:1::0;9637:2;9617:18;;;9610:30;9676:14;9656:18;;;9649:42;9708:18;;117718:70:0::1;9396:336:1::0;117718:70:0::1;117838:9;117806:28;:16;:5;:14;:16::i;:::-;-1:-1:-1::0;;117806:26:0::1;;:28::i;:::-;:41;;;117798:59;;;::::0;-1:-1:-1;;;117798:59:0;;9939:2:1;117798:59:0::1;::::0;::::1;9921:21:1::0;9978:1;9958:18;;;9951:29;10016:7;9996:18;;;9989:35;10041:18;;117798:59:0::1;9737:328:1::0;117798:59:0::1;117951:5;::::0;:9:::1;::::0;:5:::1;;::::0;:9:::1;:::i;:::-;117943:5;:17:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;117988:41:0::1;118011:17:::0;117988:22:::1;:41::i;:::-;118189:5;::::0;40613:242;;;14099:16:1;40613:242:0;;;14083:102:1;14204:66;118143:11:0::1;14307:3:1::0;14303:16;;;14299:25;;14286:11;;;14279:46;14341:11;;;14334:27;;;14395:16;;;;;14377:12;;;14370:47;14451:16;;;14447:25;;14433:12;;;14426:47;14489:12;;;14482:28;;;14544:16;;;;14540:25;;;14526:12;;;14519:47;40613:242:0;;;;;;;;;14582:12:1;;;;40613:242:0;;117970:59;;-1:-1:-1;118357:21:0::1;118381:51;118403:7;118412:5;118419:12;118381:21;:51::i;:::-;118523:19:::0;;::::1;::::0;::::1;::::0;118357:75;;-1:-1:-1;118605:25:0::1;118523:19:::0;118605:11:::1;:25::i;:::-;118898:5;::::0;::::1;;123191:2:::0;123167:26;;;;;123166:37;118784:171:::1;;118842:1;118832:7;103560:10:::0;;;103496:81;118832:7:::1;:11;;;;:::i;:::-;118806:12;118784:171;118918:5;118937:8;118784:171;;;;;;;:::i;:::-;;;;;;;;117708:1254;;;;117489:1473:::0;;;;;:::o;72729:136::-;72825:32;;10947:66:1;10933:3;10929:16;;;10925:89;72825:32:0;;;10913:102:1;11044:5;11031:11;;;11024:26;72789:7:0;;11066:11:1;;72825:32:0;;;;;;;;;;;;;72815:43;;;;;;72808:50;;72729:136;;;:::o;80324:538::-;80443:13;80480:19;:12;80443:13;80480:16;:19::i;:::-;80472:27;-1:-1:-1;74891:2:0;3639:26;17461:2;17457:16;;;17453:28;76145:37;80509:52;;;;-1:-1:-1;;;80509:52:0;;11290:2:1;80509:52:0;;;11272:21:1;11329:2;11309:18;;;11302:30;11368:20;11348:18;;;11341:48;11406:18;;80509:52:0;11088:342:1;80509:52:0;80623:138;80656:8;80678:23;-1:-1:-1;;80678:21:0;;;:23::i;:::-;80715:36;:28;-1:-1:-1;;80715:26:0;;;:28::i;:::-;-1:-1:-1;;80715:34:0;;:36::i;:::-;80623:19;:138::i;:::-;80779:47;80790:25;-1:-1:-1;;80790:23:0;;;:25::i;:::-;80817:8;80779:10;:47::i;:::-;80771:84;;;;-1:-1:-1;;;80771:84:0;;11637:2:1;80771:84:0;;;11619:21:1;11676:2;11656:18;;;11649:30;11715:26;11695:18;;;11688:54;11759:18;;80771:84:0;11435:348:1;76543:136:0;76607:6;76639:32;-1:-1:-1;;76639:15:0;;74785:1;;76639:15;:32::i;76772:124::-;76835:7;76861:28;-1:-1:-1;;76861:11:0;;74832:1;76886:2;76861:11;:28::i;122437:231::-;122507:5;:21;;;;;;;;;;;;122563:48;;;;;122599:10;122563:14;:48;;2956:74:1;122563:14:0;;;;;;;;;;:27;;2929:18:1;;122563:48:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;122641:7:0;;122626:35;;122650:10;;-1:-1:-1;122626:35:0;122641:7;;;;-1:-1:-1;122626:35:0;;122641:7;;122626:35;122437:231::o;121989:285::-;105132:19;;;;122069:81;;;;-1:-1:-1;;;122069:81:0;;12237:2:1;122069:81:0;;;12219:21:1;12276:2;12256:18;;;12249:30;12315:26;12295:18;;;12288:54;12359:18;;122069:81:0;12035:348:1;122069:81:0;122160:14;:49;;;;;;;;;;;;;;;;;;122224:43;;2956:74:1;;;122224:43:0;;2944:2:1;2929:18;122224:43:0;;;;;;;121989:285;:::o;72971:179::-;73054:7;;;;73071:21;;;;;;;;;;;73107:36;;;73054:7;;;;12623:34:1;;;12688:2;12673:18;;12666:43;;;;73107:36:0;;12535:18:1;73107:36:0;12388:327:1;63706:808:0;64103:13;;63770:4;;64103:13;;;;;64099:409;;;64157:7;:12;;64168:1;64157:12;:61;;;;-1:-1:-1;64212:4:0;105132:19;:23;64157:61;64132:166;;;;-1:-1:-1;;;64132:166:0;;12922:2:1;64132:166:0;;;12904:21:1;12961:2;12941:18;;;12934:30;13000:34;12980:18;;;12973:62;13071:16;13051:18;;;13044:44;13105:19;;64132:166:0;12720:410:1;64132:166:0;-1:-1:-1;64319:5:0;;63706:808;-1:-1:-1;63706:808:0:o;64099:409::-;64363:12;;:22;;;;:12;;:22;64355:81;;;;-1:-1:-1;;;64355:81:0;;12922:2:1;64355:81:0;;;12904:21:1;12961:2;12941:18;;;12934:30;13000:34;12980:18;;;12973:62;13071:16;13051:18;;;13044:44;13105:19;;64355:81:0;12720:410:1;64355:81:0;-1:-1:-1;64450:12:0;:22;;;;;;;;;;;;;;;-1:-1:-1;;63706:808:0:o;64099:409::-;63706:808;;;:::o;71824:142::-;63117:13;;;;;;;63109:69;;;;-1:-1:-1;;;63109:69:0;;13337:2:1;63109:69:0;;;13319:21:1;13376:2;13356:18;;;13349:30;13415:34;13395:18;;;13388:62;13486:13;13466:18;;;13459:41;13517:19;;63109:69:0;13135:407:1;63109:69:0;71912:16:::1;:14;:16::i;:::-;71938:21;71950:8;71938:11;:21::i;89780:122::-:0;89837:7;89863:32;89875:5;89882:12;:10;:12::i;:::-;89863:11;:32::i;69868:187::-;69960:6;;;;69976:17;;;;;;;;;;;70008:40;;69960:6;;;69976:17;69960:6;;70008:40;;69941:16;;70008:40;69931:124;69868:187;:::o;97368:122::-;97429:7;97455:28;:5;35057:10;97455:9;:28::i;98475:183::-;98548:6;98532:5;96375:35;35057:10;35050:18;-1:-1:-1;;96375:16:0;;;;:35::i;:::-;;98632:19:::1;98645:5;98632:12;:19::i;:::-;98613:16;98623:5;98613:9;:16::i;:::-;98593:17;98604:5;98593:10;:17::i;:::-;98573;98584:5;98573:10;:17::i;:::-;:37;;;;:::i;:::-;:56;;;;:::i;:::-;:78;;;;:::i;:::-;98566:85;;96420:1;98475:183:::0;;;;:::o;123986:814::-;124092:14;99293:24;124126:48;;124122:672;;124226:10;124190:47;63706:808;-1:-1:-1;;63706:808:0:o;124122:672::-;124630:24;:22;:24::i;:::-;-1:-1:-1;99293:24:0;123986:814;;;:::o;36242:638::-;36538:14;;36387:12;;36495:17;;35993:29;36011:10;35864:1;35993:29;:::i;:::-;36515:13;;:38;;;;:::i;:::-;36495:58;;36563:17;36603:5;:12;36583:10;:33;;;;:::i;:::-;36563:53;-1:-1:-1;34714:1:0;35993:29;36011:10;35864:1;35993:29;:::i;:::-;36712:13;;36743:10;36771;36799:7;36824:5;36847:12;36645:228;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;36626:247;;;;36242:638;;;;;;:::o;103734:123::-;103789:18;:4;103801:5;103789:11;:18::i;:::-;103817:15;103838:11;:4;:9;:11::i;:::-;103817:33;;;;;;;-1:-1:-1;103817:33:0;;;;;;;;;;;-1:-1:-1;103734:123:0:o;14624:359::-;14728:10;;14694:7;;14875:4;14866:14;;14950:26;;;;14866:14;14728:10;14950:5;:26::i;:::-;14943:33;14624:359;-1:-1:-1;;;;;14624:359:0:o;77002:155::-;77065:7;77091:59;-1:-1:-1;;77091:11:0;;77065:7;74891:2;77065:7;77091:11;:59::i;77240:172::-;77308:7;77334:71;74891:2;77364:37;74891:2;17461;17457:16;;;3639:26;17453:28;77364:37;:::i;:::-;-1:-1:-1;;77334:11:0;;;:71;77403:1;77334:11;:71::i;29277:632::-;29332:16;29360:11;29381:12;29396;29400:7;17461:2;17457:16;3639:26;17453:28;;17215:282;29396:12;29381:27;;;;29518:4;29512:11;29505:18;;29573:3;29566:10;;29619:33;29632:7;29641:3;29647:4;29641:10;29619:12;:33::i;:::-;-1:-1:-1;29776:14:0;;;29792:4;29772:25;29766:4;29759:39;29839:17;;29277:632;;-1:-1:-1;29277:632:0:o;77776:314::-;77911:14;77928;-1:-1:-1;;77928:12:0;;;:14::i;:::-;77911:31;;77961:36;77990:6;77961:28;:36::i;:::-;77952:45;;78053:7;78016:44;;:33;78030:6;78038:10;78016:13;:33::i;:::-;:44;;;78007:76;;;;-1:-1:-1;;;78007:76:0;;16357:2:1;78007:76:0;;;16339:21:1;16396:2;16376:18;;;16369:30;16435:19;16415:18;;;16408:47;16472:18;;78007:76:0;16155:341:1;78007:76:0;77901:189;77776:314;;;:::o;76286:143::-;76351:6;76383:38;-1:-1:-1;;76383:15:0;;76351:6;76419:1;76383:15;:38::i;123216:236::-;123338:4;123381:11;123366:26;;:11;:26;;;123358:51;;;;-1:-1:-1;;;123358:51:0;;16703:2:1;123358:51:0;;;16685:21:1;16742:2;16722:18;;;16715:30;16781:14;16761:18;;;16754:42;16813:18;;123358:51:0;16501:336:1;123358:51:0;-1:-1:-1;123438:7:0;;;;;;123426:19;;;;123216:236;-1:-1:-1;123216:236:0:o;22090:221::-;22209:14;22287:11;22292:6;22287:2;:11;:::i;:::-;22286:17;;22302:1;22286:17;:::i;:::-;22242:62;;22250:30;22256:7;22265:6;22273;22250:5;:30::i;:::-;22242:62;;;22090:221;-1:-1:-1;;;;22090:221:0:o;20973:771::-;21088:14;21118:6;:11;;21128:1;21118:11;21114:59;;-1:-1:-1;21160:1:0;21145:17;;21114:59;21204:12;21208:7;17461:2;17457:16;3639:26;17453:28;;17215:282;21204:12;21186:30;;:15;;;;:6;:15;:::i;:::-;:30;21182:137;;;21239:68;21255:12;21259:7;16355:3;16351:17;3639:26;16347:29;;16028:364;21255:12;21239:68;;21269:12;21273:7;17461:2;17457:16;3639:26;17453:28;;17215:282;21269:12;21239:68;;21283:6;21299;21291:15;;21239;:68::i;:::-;21232:76;;-1:-1:-1;;;21232:76:0;;;;;;;;:::i;21182:137::-;21346:2;21336:6;:12;;;;21328:83;;;;-1:-1:-1;;;21328:83:0;;17601:2:1;21328:83:0;;;17583:21:1;17640:2;17620:18;;;17613:30;17679:34;17659:18;;;17652:62;17750:28;17730:18;;;17723:56;17796:19;;21328:83:0;17399:422:1;21328:83:0;21492:1;21483:10;;21422:15;21528:12;21532:7;16355:3;16351:17;3639:26;16347:29;;16028:364;21528:12;21513:27;;;-1:-1:-1;21550:13:0;8457:66;8427:12;;;8406:131;21702:17;;;;21696:24;21692:36;;;-1:-1:-1;;;;;20973:771:0:o;68346:95::-;63117:13;;;;;;;63109:69;;;;-1:-1:-1;;;63109:69:0;;13337:2:1;63109:69:0;;;13319:21:1;13376:2;13356:18;;;13349:30;13415:34;13395:18;;;13388:62;13486:13;13466:18;;;13459:41;13517:19;;63109:69:0;13135:407:1;63109:69:0;68408:26:::1;:24;:26::i;90020:964::-:0;90065:34;;:::i;:::-;90124:3;90111:16;;90150:3;90111:10;90137;;:16;90176:3;90163:10;;;:16;90202:3;90189:10;;;:16;90228:3;90215:10;;;:16;90254:3;90241:10;;;:16;90280:3;90267:10;;;:16;90306:3;90293:10;;;:16;90332:3;90319:10;;;:16;90358:3;90345:10;;;:16;90385:4;90371:11;;;:18;90413:4;90399:11;;;:18;90441:4;90427:11;;;:18;90469:4;90455:11;;;:18;90497:4;90483:11;;;:18;90525:4;90511:11;;;:18;90553:4;90539:11;;;:18;90581:4;90567:11;;;:18;90609:4;90595:11;;;:18;90637:4;90623:11;;;:18;90665:4;90651:11;;;:18;90693:4;90679:11;;;:18;90721:4;90707:11;;;:18;90749:4;90735:11;;;:18;90777:4;90763:11;;;:18;90805:4;90791:11;;;:18;90833:4;90819:11;;;:18;90861:4;90847:11;;;:18;90889:4;90875:11;;;:18;90917:4;90903:11;;;:18;90945:4;90931:11;;;:18;90973:4;90959:11;;;:18;90111:7;90020:964::o;89124:589::-;89297:11;;;;89248:16;;;89319:388;87704:2;89339:1;:14;89319:388;;;89405:4;89390:11;;;89389:20;;;89427:12;;;89423:215;;89497:5;89510:1;89497:15;;;;;;;:::i;:::-;;;89480:43;;;;;;17983:19:1;;;;18018:12;;18011:28;;;18055:12;;89480:43:0;;;;;;;;;;;;89470:54;;;;;;89459:65;;89423:215;;;89601:8;89611:7;89619:1;89611:10;;;;;;;:::i;:::-;;;;;89584:38;;;;;;;;17983:19:1;;;18027:2;18018:12;;18011:28;18064:2;18055:12;;17826:247;89584:38:0;;;;;;;;;;;;;89574:49;;;;;;89563:60;;89423:215;-1:-1:-1;89679:3:0;;89319:388;;;;89270:443;89124:589;;;;:::o;11042:578::-;11120:7;11144:26;11151:7;11160:9;11144:6;:26::i;:::-;11139:451;;11189:9;11202:35;11220:15;11227:7;15386:3;15382:17;;15175:268;11220:15;11212:24;;11202:9;:35::i;:::-;11186:51;;;11254:9;11267:29;11285:9;11277:18;;11267:9;:29::i;:::-;11354:186;;18445:31:1;11354:186:0;;;18433:44:1;18496:66;18600:3;18596:16;;;18592:25;;18578:12;;;18571:47;18648:15;18634:12;;;18627:37;18698:16;;;18694:25;18680:12;;;18673:47;11251:45:0;;-1:-1:-1;11310:17:0;;-1:-1:-1;18736:12:1;;11354:186:0;;;;;;;;;;;;11310:244;;11575:3;11568:11;;-1:-1:-1;;;11568:11:0;;;;;;;;:::i;11139:451::-;-1:-1:-1;11606:7:0;;11042:578;-1:-1:-1;11042:578:0:o;98316:153::-;98392:6;98376:5;96375:35;35057:10;35050:18;;96375:35;-1:-1:-1;98424:37:0::1;-1:-1:-1::0;;98424:15:0;::::1;96323:2;98458;98424:15;:37::i;:::-;98410:52;;::::0;98316:153;-1:-1:-1;;;98316:153:0:o;98120:147::-;98193:6;98177:5;96375:35;35057:10;35050:18;;96375:35;-1:-1:-1;98225:34:0::1;-1:-1:-1::0;;98225:15:0;::::1;96270:2;98256;98225:15;:34::i;97925:149::-:0;97999:6;97983:5;96375:35;35057:10;35050:18;;96375:35;-1:-1:-1;98031:35:0::1;-1:-1:-1::0;;98031:15:0;::::1;96220:2;98063;98031:15;:35::i;97729:149::-:0;97803:6;97787:5;96375:35;35057:10;35050:18;;96375:35;-1:-1:-1;97835:35:0::1;-1:-1:-1::0;;97835:15:0;::::1;96170:1;97867:2;97835:15;:35::i;72480:132::-:0;72568:15;;;;72546:10;:38;72538:67;;;;-1:-1:-1;;;72538:67:0;;18961:2:1;72538:67:0;;;18943:21:1;19000:2;18980:18;;;18973:30;19039:18;19019;;;19012:46;19075:18;;72538:67:0;18759:340:1;88163:750:0;88248:11;;;;;;87767:1;;87751:13;;:1;:13;:::i;:::-;:17;;;;:::i;:::-;88277:4;:17;88269:46;;;;-1:-1:-1;;;88269:46:0;;20800:2:1;88269:46:0;;;20782:21:1;20839:2;20819:18;;;20812:30;20878:18;20858;;;20851:46;20914:18;;88269:46:0;20598:340:1;88269:46:0;88350:6;;88376:11;;;:18;;;88409:9;88404:319;87704:2;88424:1;:14;88404:319;;;88461:4;88468:1;88461:8;88474:1;88460:15;88456:101;;88513:5;88495;88508:1;88495:15;;;;;;;:::i;:::-;;:23;-1:-1:-1;;;;88163:750:0:o;88456:101::-;88605:5;88618:1;88605:15;;;;;;;:::i;:::-;;;88588:40;;;;;;17983:19:1;;;;18018:12;;18011:28;;;18055:12;;88588:40:0;;;;;;;;;;;;;88578:51;;88588:40;88578:51;;;;;-1:-1:-1;88652:1:0;88643:10;;;;88695:3;88404:319;;;-1:-1:-1;88893:13:0;;:::i;:::-;88223:690;88163:750;;:::o;13765:462::-;13876:15;;13918:11;13925:4;13918;:11;:::i;:::-;13903:26;;14044:4;14038:11;14032:4;14029:21;14026:66;;;-1:-1:-1;14077:1:0;14026:66;14115:4;14123:1;14115:9;14111:51;;-1:-1:-1;;14140:11:0;;;;;14111:51;-1:-1:-1;;13034:2:0;13030:27;;;13104:17;;;;13096:26;;;13168:17;13164:2;13160:26;;13765:462::o;18098:399::-;18237:7;18256:12;18271;18275:7;16355:3;16351:17;3639:26;16347:29;;16028:364;18271:12;18256:27;;;;18367:12;18371:7;18367:3;:12::i;:::-;18360:4;18344:13;18351:6;18344:4;:13;:::i;:::-;:20;;;;:::i;:::-;:35;18340:77;;;-1:-1:-1;;18395:11:0;;;;;18340:77;18434:13;18441:6;18434:4;:13;:::i;:::-;18427:20;;18464:26;18470:7;18464:26;;18479:4;18485;18464:5;:26::i;:::-;18457:33;;;18098:399;;;;;;;:::o;28005:902::-;28083:15;-1:-1:-1;;8941:15:0;;;;28110:69;;;;-1:-1:-1;;;28110:69:0;;21334:2:1;28110:69:0;;;21316:21:1;21373:2;21353:18;;;21346:30;21412:34;21392:18;;;21385:62;21483:10;21463:18;;;21456:38;21511:19;;28110:69:0;21132:404:1;28110:69:0;28197:16;28205:7;28197;:16::i;:::-;28189:72;;;;-1:-1:-1;;;28189:72:0;;21743:2:1;28189:72:0;;;21725:21:1;21782:2;21762:18;;;21755:30;21821:34;21801:18;;;21794:62;21892:13;21872:18;;;21865:41;21923:19;;28189:72:0;21541:407:1;28189:72:0;28271:12;28286;28290:7;17461:2;17457:16;3639:26;17453:28;;17215:282;28286:12;28271:27;;;;28308:15;28326:12;28330:7;16355:3;16351:17;3639:26;16347:29;;16028:364;28326:12;28308:30;;;;28349:11;28470:4;28464:11;28457:18;;28557:7;28552:3;28549:16;28546:94;;;28597:4;28591;28584:18;28546:94;28812:4;28803:7;28797:4;28788:7;28785:1;28778:5;28767:50;28763:55;28848:52;28869:15;28876:7;15386:3;15382:17;;15175:268;28869:15;13030:27;13034:2;13030:27;;;;13104:17;;13096:26;;13168:17;;13164:2;13160:26;;12780:446;28848:52;28838:62;28005:902;-1:-1:-1;;;;;;28005:902:0:o;23424:290::-;23480:14;23506:12;23521;23525:7;16355:3;16351:17;3639:26;16347:29;;16028:364;23521:12;23506:27;;;;23543:12;23558;23562:7;17461:2;17457:16;3639:26;17453:28;;17215:282;23558:12;23543:27;;23677:21;;;;23424:290;-1:-1:-1;;;23424:290:0:o;52255:265::-;52454:58;;22195:66:1;52454:58:0;;;22183:79:1;22278:12;;;22271:28;;;52324:7:0;;22315:12:1;;52454:58:0;21953:380:1;48551:227:0;48629:7;48649:17;48668:18;48690:27;48701:4;48707:9;48690:10;:27::i;:::-;48648:69;;;;48727:18;48739:5;48727:11;:18::i;:::-;-1:-1:-1;48762:9:0;48551:227;-1:-1:-1;;;48551:227:0:o;19730:741::-;19876:17;19908:9;19921:15;19931:4;19921:9;:15::i;:::-;19905:31;;;19949:9;19962:15;19972:4;19962:9;:15::i;:::-;19946:31;;;19990:9;20003:17;20013:6;20003:9;:17::i;:::-;19987:33;;;20033:9;20046:17;20056:6;20046:9;:17::i;:::-;20030:33;;;20213:1;20275;20355;20417;20099:355;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20073:391;;19895:576;;;;19730:741;;;;;;:::o;68447:111::-;63117:13;;;;;;;63109:69;;;;-1:-1:-1;;;63109:69:0;;13337:2:1;63109:69:0;;;13319:21:1;13376:2;13356:18;;;13349:30;13415:34;13395:18;;;13388:62;13486:13;13466:18;;;13459:41;13517:19;;63109:69:0;13135:407:1;63109:69:0;68519:32:::1;67634:10:::0;68519:18:::1;:32::i;10612:132::-:0;10686:4;10728:9;10709:28;;:15;10716:7;15386:3;15382:17;;15175:268;10709:15;:28;;;;10612:132;-1:-1:-1;;;10612:132:0:o;6000:667::-;6054:13;;6110:2;6095:258;6118:2;6114:1;:6;;;6095:258;;;6138:11;6165:5;:1;6169;6165:5;:::i;:::-;6158:13;;:2;:13;;6138:34;;6195:14;6203:5;6195:7;:14::i;:::-;6186:23;;;;;;6227:1;:7;;6232:2;6227:7;6223:58;;6264:2;6254:12;;;;;6223:58;-1:-1:-1;6322:6:0;;6095:258;;;-1:-1:-1;6416:2:0;6401:260;6424:3;6420:1;:7;;;6401:260;;;6445:11;6472:5;:1;6476;6472:5;:::i;:::-;6465:13;;:2;:13;;6445:34;;6503:14;6511:5;6503:7;:14::i;:::-;6493:24;;;;;;6535:1;:6;;6540:1;6535:6;6531:58;;6572:2;6561:13;;;;;6531:58;-1:-1:-1;6630:6:0;;6401:260;;;;6000:667;;;:::o;17671:147::-;17724:7;17789:12;17793:7;17461:2;17457:16;3639:26;17453:28;;17215:282;17789:12;17774;17778:7;16355:3;16351:17;3639:26;16347:29;;16028:364;17774:12;:27;17767:34;;;;17671:147;;;:::o;9614:333::-;9671:8;9695:15;9702:7;15386:3;15382:17;;15175:268;9695:15;:31;;9714:12;9695:31;9691:74;;-1:-1:-1;9749:5:0;;9614:333;-1:-1:-1;9614:333:0:o;9691:74::-;9774:12;9789;9793:7;9789:3;:12::i;:::-;9924:4;9918:11;-1:-1:-1;9905:26:0;;9614:333;-1:-1:-1;;;9614:333:0:o;46486:1279::-;46567:7;46576:12;46797:9;:16;46817:2;46797:22;46793:966;;47086:4;47071:20;;47065:27;47135:4;47120:20;;47114:27;47192:4;47177:20;;47171:27;46835:9;47163:36;47233:25;47244:4;47163:36;47065:27;47114;47233:10;:25::i;:::-;47226:32;;;;;;;;;46793:966;47279:9;:16;47299:2;47279:22;47275:484;;47548:4;47533:20;;47527:27;47598:4;47583:20;;47577:27;47638:23;47649:4;47527:27;47577;47638:10;:23::i;:::-;47631:30;;;;;;;;47275:484;-1:-1:-1;47708:1:0;;-1:-1:-1;47712:35:0;47275:484;46486:1279;;;;;:::o;44791:631::-;44868:20;44859:5;:29;;;;;;;;:::i;:::-;;44855:561;;44791:631;:::o;44855:561::-;44964:29;44955:5;:38;;;;;;;;:::i;:::-;;44951:465;;45009:34;;-1:-1:-1;;;45009:34:0;;24055:2:1;45009:34:0;;;24037:21:1;24094:2;24074:18;;;24067:30;24133:26;24113:18;;;24106:54;24177:18;;45009:34:0;23853:348:1;44951:465:0;45073:35;45064:5;:44;;;;;;;;:::i;:::-;;45060:356;;45124:41;;-1:-1:-1;;;45124:41:0;;24408:2:1;45124:41:0;;;24390:21:1;24447:2;24427:18;;;24420:30;24486:33;24466:18;;;24459:61;24537:18;;45124:41:0;24206:355:1;45060:356:0;45195:30;45186:5;:39;;;;;;;;:::i;:::-;;45182:234;;45241:44;;-1:-1:-1;;;45241:44:0;;24768:2:1;45241:44:0;;;24750:21:1;24807:2;24787:18;;;24780:30;24846:34;24826:18;;;24819:62;24917:4;24897:18;;;24890:32;24939:19;;45241:44:0;24566:398:1;45182:234:0;45315:30;45306:5;:39;;;;;;;;:::i;:::-;;45302:114;;45361:44;;-1:-1:-1;;;45361:44:0;;25171:2:1;45361:44:0;;;25153:21:1;25210:2;25190:18;;;25183:30;25249:34;25229:18;;;25222:62;25320:4;25300:18;;;25293:32;25342:19;;45361:44:0;24969:398:1;5477:199:0;5527:14;5564:18;5580:1;5574:2;:7;;;;5564:9;:18::i;:::-;5553:29;;5606:13;;;;;;5618:1;5606:13;5640;5650:2;5640:9;:13::i;:::-;5629:24;;;;5477:199;-1:-1:-1;5477:199:0:o;49959:1603::-;50085:7;;51009:66;50996:79;;50992:161;;;-1:-1:-1;51107:1:0;;-1:-1:-1;51111:30:0;51091:51;;50992:161;51166:1;:7;;51171:2;51166:7;;:18;;;;;51177:1;:7;;51182:2;51177:7;;51166:18;51162:100;;;-1:-1:-1;51216:1:0;;-1:-1:-1;51220:30:0;51200:51;;51162:100;51373:24;;;51356:14;51373:24;;;;;;;;;25599:25:1;;;25672:4;25660:17;;25640:18;;;25633:45;;;;25694:18;;;25687:34;;;25737:18;;;25730:34;;;51373:24:0;;25571:19:1;;51373:24:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;51373:24:0;;;;;;-1:-1:-1;;51411:20:0;;;51407:101;;51463:1;51467:29;51447:50;;;;;;;51407:101;51526:6;-1:-1:-1;51534:20:0;;-1:-1:-1;49959:1603:0;;;;;;;;:::o;49032:336::-;49142:7;;49200:66;49187:80;;49142:7;49293:25;49309:3;49294:18;;;49316:2;49293:25;:::i;:::-;49277:42;;49336:25;49347:4;49353:1;49356;49359;49336:10;:25::i;:::-;49329:32;;;;;;49032:336;;;;;;:::o;3912:1393::-;3964:10;4130:4;4125:9;;;;4176:15;;;;;4172:57;;-1:-1:-1;4214:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4172:57::-;4247:7;:15;;4258:4;4247:15;4243:57;;-1:-1:-1;4285:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4243:57::-;4318:7;:15;;4329:4;4318:15;4314:57;;-1:-1:-1;4356:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4314:57::-;4389:7;:15;;4400:4;4389:15;4385:57;;-1:-1:-1;4427:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4385:57::-;4460:7;:15;;4471:4;4460:15;4456:57;;-1:-1:-1;4498:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4456:57::-;4531:7;:15;;4542:4;4531:15;4527:57;;-1:-1:-1;4569:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4527:57::-;4602:7;:15;;4613:4;4602:15;4598:57;;-1:-1:-1;4640:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4598:57::-;4673:7;:15;;4684:4;4673:15;4669:57;;-1:-1:-1;4711:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4669:57::-;4744:7;:15;;4755:4;4744:15;4740:57;;-1:-1:-1;4782:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4740:57::-;4815:7;:15;;4826:4;4815:15;4811:57;;-1:-1:-1;4853:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4811:57::-;4886:7;:15;;4897:4;4886:15;4882:57;;-1:-1:-1;4924:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4882:57::-;4957:7;:15;;4968:4;4957:15;4953:57;;-1:-1:-1;4995:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;4953:57::-;5028:7;:15;;5039:4;5028:15;5024:57;;-1:-1:-1;5066:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;5024:57::-;5099:7;:15;;5110:4;5099:15;5095:57;;-1:-1:-1;5137:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;5095:57::-;5170:7;:15;;5181:4;5170:15;5166:57;;-1:-1:-1;5208:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;5166:57::-;5241:7;:15;;5252:4;5241:15;5237:57;;-1:-1:-1;5279:4:0;;3912:1393;-1:-1:-1;;3912:1393:0:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;646:180:1:-;705:6;758:2;746:9;737:7;733:23;729:32;726:52;;;774:1;771;764:12;726:52;-1:-1:-1;797:23:1;;646:180;-1:-1:-1;646:180:1:o;831:154::-;917:42;910:5;906:54;899:5;896:65;886:93;;975:1;972;965:12;990:184;1042:77;1039:1;1032:88;1139:4;1136:1;1129:15;1163:4;1160:1;1153:15;1179:777;1221:5;1274:3;1267:4;1259:6;1255:17;1251:27;1241:55;;1292:1;1289;1282:12;1241:55;1328:6;1315:20;1354:18;1391:2;1387;1384:10;1381:36;;;1397:18;;:::i;:::-;1531:2;1525:9;1593:4;1585:13;;1436:66;1581:22;;;1605:2;1577:31;1573:40;1561:53;;;1629:18;;;1649:22;;;1626:46;1623:72;;;1675:18;;:::i;:::-;1715:10;1711:2;1704:22;1750:2;1742:6;1735:18;1796:3;1789:4;1784:2;1776:6;1772:15;1768:26;1765:35;1762:55;;;1813:1;1810;1803:12;1762:55;1877:2;1870:4;1862:6;1858:17;1851:4;1843:6;1839:17;1826:54;1924:1;1917:4;1912:2;1904:6;1900:15;1896:26;1889:37;1944:6;1935:15;;;;;;1179:777;;;;:::o;1961:455::-;2038:6;2046;2099:2;2087:9;2078:7;2074:23;2070:32;2067:52;;;2115:1;2112;2105:12;2067:52;2154:9;2141:23;2173:31;2198:5;2173:31;:::i;:::-;2223:5;-1:-1:-1;2279:2:1;2264:18;;2251:32;2306:18;2295:30;;2292:50;;;2338:1;2335;2328:12;2292:50;2361:49;2402:7;2393:6;2382:9;2378:22;2361:49;:::i;:::-;2351:59;;;1961:455;;;;;:::o;3041:247::-;3100:6;3153:2;3141:9;3132:7;3128:23;3124:32;3121:52;;;3169:1;3166;3159:12;3121:52;3208:9;3195:23;3227:31;3252:5;3227:31;:::i;3821:184::-;3873:77;3870:1;3863:88;3970:4;3967:1;3960:15;3994:4;3991:1;3984:15;4010:396;4153:2;4138:18;;4186:1;4175:13;;4165:201;;4222:77;4219:1;4212:88;4323:4;4320:1;4313:15;4351:4;4348:1;4341:15;4165:201;4375:25;;;4010:396;:::o;4939:163::-;5006:20;;5066:10;5055:22;;5045:33;;5035:61;;5092:1;5089;5082:12;5107:753;5218:6;5226;5234;5242;5250;5303:3;5291:9;5282:7;5278:23;5274:33;5271:53;;;5320:1;5317;5310:12;5271:53;5343:28;5361:9;5343:28;:::i;:::-;5333:38;;5418:2;5407:9;5403:18;5390:32;5380:42;;5441:37;5474:2;5463:9;5459:18;5441:37;:::i;:::-;5431:47;;5529:2;5518:9;5514:18;5501:32;5552:18;5593:2;5585:6;5582:14;5579:34;;;5609:1;5606;5599:12;5579:34;5632:49;5673:7;5664:6;5653:9;5649:22;5632:49;:::i;:::-;5622:59;;5734:3;5723:9;5719:19;5706:33;5690:49;;5764:2;5754:8;5751:16;5748:36;;;5780:1;5777;5770:12;5748:36;;5803:51;5846:7;5835:8;5824:9;5820:24;5803:51;:::i;:::-;5793:61;;;5107:753;;;;;;;;:::o;6054:184::-;6106:77;6103:1;6096:88;6203:4;6200:1;6193:15;6227:4;6224:1;6217:15;6243:125;6283:4;6311:1;6308;6305:8;6302:34;;;6316:18;;:::i;:::-;-1:-1:-1;6353:9:1;;6243:125::o;6373:184::-;6425:77;6422:1;6415:88;6522:4;6519:1;6512:15;6546:4;6543:1;6536:15;7264:258;7336:1;7346:113;7360:6;7357:1;7354:13;7346:113;;;7436:11;;;7430:18;7417:11;;;7410:39;7382:2;7375:10;7346:113;;;7477:6;7474:1;7471:13;7468:48;;;-1:-1:-1;;7512:1:1;7494:16;;7487:27;7264:258::o;7527:316::-;7568:3;7606:5;7600:12;7633:6;7628:3;7621:19;7649:63;7705:6;7698:4;7693:3;7689:14;7682:4;7675:5;7671:16;7649:63;:::i;:::-;7757:2;7745:15;7762:66;7741:88;7732:98;;;;7832:4;7728:109;;7527:316;-1:-1:-1;;7527:316:1:o;7848:337::-;8035:42;8027:6;8023:55;8012:9;8005:74;8115:2;8110;8099:9;8095:18;8088:30;7986:4;8135:44;8175:2;8164:9;8160:18;8152:6;8135:44;:::i;8534:251::-;8604:6;8657:2;8645:9;8636:7;8632:23;8628:32;8625:52;;;8673:1;8670;8663:12;8625:52;8705:9;8699:16;8724:31;8749:5;8724:31;:::i;10070:228::-;10109:3;10137:10;10174:2;10171:1;10167:10;10204:2;10201:1;10197:10;10235:3;10231:2;10227:12;10222:3;10219:21;10216:47;;;10243:18;;:::i;:::-;10279:13;;10070:228;-1:-1:-1;;;;10070:228:1:o;10303:377::-;10496:2;10485:9;10478:21;10459:4;10522:44;10562:2;10551:9;10547:18;10539:6;10522:44;:::i;:::-;10614:9;10606:6;10602:22;10597:2;10586:9;10582:18;10575:50;10642:32;10667:6;10659;10642:32;:::i;13547:244::-;13586:3;13614:26;13667:2;13664:1;13660:10;13697:2;13694:1;13690:10;13728:3;13724:2;13720:12;13715:3;13712:21;13709:47;;;13736:18;;:::i;14605:238::-;14643:7;14683:4;14680:1;14676:12;14715:4;14712:1;14708:12;14775:3;14769:4;14765:14;14760:3;14757:23;14750:3;14743:11;14736:19;14732:49;14729:75;;;14784:18;;:::i;:::-;14824:13;;14605:238;-1:-1:-1;;;14605:238:1:o;14848:224::-;14887:3;14915:6;14948:2;14945:1;14941:10;14978:2;14975:1;14971:10;15009:3;15005:2;15001:12;14996:3;14993:21;14990:47;;;15017:18;;:::i;15077:1073::-;15402:3;15430:66;15539:2;15530:6;15525:3;15521:16;15517:25;15512:3;15505:38;15594:2;15585:6;15580:3;15576:16;15572:25;15568:1;15563:3;15559:11;15552:46;15649:2;15640:6;15635:3;15631:16;15627:25;15623:1;15618:3;15614:11;15607:46;15704:2;15695:6;15690:3;15686:16;15682:25;15678:1;15673:3;15669:11;15662:46;;15737:6;15731:13;15753:61;15807:6;15803:1;15798:3;15794:11;15787:4;15779:6;15775:17;15753:61;:::i;:::-;15874:13;;15833:16;;;;15896:62;15874:13;15945:1;15937:10;;15930:4;15918:17;;15896:62;:::i;:::-;16019:13;;15977:17;;;16041:62;16019:13;16090:1;16082:10;;16075:4;16063:17;;16041:62;:::i;:::-;16123:17;16142:1;16119:25;;15077:1073;-1:-1:-1;;;;;;;;;15077:1073:1:o;16842:195::-;16880:4;16917;16914:1;16910:12;16949:4;16946:1;16942:12;16974:3;16969;16966:12;16963:38;;;16981:18;;:::i;:::-;17018:13;;;16842:195;-1:-1:-1;;;16842:195:1:o;17042:128::-;17082:3;17113:1;17109:6;17106:1;17103:13;17100:39;;;17119:18;;:::i;:::-;-1:-1:-1;17155:9:1;;17042:128::o;17175:219::-;17324:2;17313:9;17306:21;17287:4;17344:44;17384:2;17373:9;17369:18;17361:6;17344:44;:::i;19104:482::-;19193:1;19236:5;19193:1;19250:330;19271:7;19261:8;19258:21;19250:330;;;19390:4;19322:66;19318:77;19312:4;19309:87;19306:113;;;19399:18;;:::i;:::-;19449:7;19439:8;19435:22;19432:55;;;19469:16;;;;19432:55;19548:22;;;;19508:15;;;;19250:330;;;19254:3;19104:482;;;;;:::o;19591:866::-;19640:5;19670:8;19660:80;;-1:-1:-1;19711:1:1;19725:5;;19660:80;19759:4;19749:76;;-1:-1:-1;19796:1:1;19810:5;;19749:76;19841:4;19859:1;19854:59;;;;19927:1;19922:130;;;;19834:218;;19854:59;19884:1;19875:10;;19898:5;;;19922:130;19959:3;19949:8;19946:17;19943:43;;;19966:18;;:::i;:::-;-1:-1:-1;;20022:1:1;20008:16;;20037:5;;19834:218;;20136:2;20126:8;20123:16;20117:3;20111:4;20108:13;20104:36;20098:2;20088:8;20085:16;20080:2;20074:4;20071:12;20067:35;20064:77;20061:159;;;-1:-1:-1;20173:19:1;;;20205:5;;20061:159;20252:34;20277:8;20271:4;20252:34;:::i;:::-;20382:6;20314:66;20310:79;20301:7;20298:92;20295:118;;;20393:18;;:::i;20462:131::-;20522:5;20551:36;20578:8;20572:4;20551:36;:::i;20943:184::-;20995:77;20992:1;20985:88;21092:4;21089:1;21082:15;21116:4;21113:1;21106:15;22457:1391;23179:34;23167:47;;23244:23;23239:2;23230:12;;23223:45;23287:66;23391:3;23387:16;;;23383:25;;23378:2;23369:12;;23362:47;23428:17;23470:2;23461:12;;23454:24;;;23512:16;;;23508:25;;23503:2;23494:12;;23487:47;23564:34;23559:2;23550:12;;23543:56;23630:3;23624;23615:13;;23608:26;23669:16;;;23665:25;;23659:3;23650:13;;23643:48;23716:3;23707:13;;23700:25;23760:16;;;23756:25;23750:3;23741:13;;23734:48;22415:3;23837;23828:13;;22403:16;-1:-1:-1;22435:11:1;;;23798:44;22338:114","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"_localDomain","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageHash","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"leafIndex","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"destinationAndNonce","type":"uint64"},{"indexed":false,"internalType":"bytes","name":"tips","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"Dispatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"updater","type":"address"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"ImproperAttestation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldUpdater","type":"address"},{"indexed":false,"internalType":"address","name":"newUpdater","type":"address"}],"name":"NewUpdater","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"updaterManager","type":"address"}],"name":"NewUpdaterManager","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"homeDomain","type":"uint32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"}],"name":"Update","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"updater","type":"address"},{"indexed":true,"internalType":"address","name":"reporter","type":"address"}],"name":"UpdaterSlashed","type":"event"},{"inputs":[],"name":"MAX_MESSAGE_BODY_BYTES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"_recipientAddress","type":"bytes32"},{"internalType":"uint32","name":"_optimisticSeconds","type":"uint32"},{"internalType":"bytes","name":"_tips","type":"bytes"},{"internalType":"bytes","name":"_messageBody","type":"bytes"}],"name":"dispatch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"historicalRoots","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"homeDomainHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_updater","type":"address"},{"internalType":"bytes","name":"_attestation","type":"bytes"}],"name":"improperAttestation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IUpdaterManager","name":"_updaterManager","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ISystemMessenger","name":"_systemMessenger","type":"address"}],"name":"setSystemMessenger","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_updater","type":"address"}],"name":"setUpdater","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_updaterManager","type":"address"}],"name":"setUpdaterManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"state","outputs":[{"internalType":"enum Home.States","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"suggestUpdate","outputs":[{"internalType":"uint32","name":"_nonce","type":"uint32"},{"internalType":"bytes32","name":"_root","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"systemMessenger","outputs":[{"internalType":"contract ISystemMessenger","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tree","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updater","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updaterManager","outputs":[{"internalType":"contract IUpdaterManager","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"Dispatch(bytes32,uint256,uint64,bytes,bytes)":{"notice":"Emitted when a new message is dispatched via Nomad"},"ImproperAttestation(address,bytes)":{"notice":"Emitted when proof of an improper attestation is submitted, which sets the contract to FAILED state"},"NewUpdater(address,address)":{"notice":"Emitted when Updater is rotated"},"NewUpdaterManager(address)":{"notice":"Emitted when the UpdaterManager contract is changed"},"Update(uint32,uint32,bytes32,bytes)":{"notice":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica"},"UpdaterSlashed(address,address)":{"notice":"Emitted when the Updater is slashed (should be paired with ImproperUpdater or DoubleUpdate event)"}},"kind":"user","methods":{"count()":{"notice":"Returns the number of inserted leaves in the tree (current index)"},"dispatch(uint32,bytes32,uint32,bytes,bytes)":{"notice":"Dispatch the message to the destination domain \u0026 recipient"},"homeDomainHash()":{"notice":"Hash of Home domain concatenated with \"SYN\""},"improperAttestation(address,bytes)":{"notice":"Check if an Attestation is an Improper Attestation; if so, slash the Updater and set the contract to FAILED state. An Improper Attestation is a (_nonce, _root) update that doesn't correspond with the historical state of Home contract. Either of those needs to be true: - _nonce is higher than current nonce (no root exists for this nonce) - _root is not equal to the historical root of _nonce This would mean that message(s) that were not truly dispatched on Home were falsely included in the signed root. An Improper Attestation will only be accepted as valid by the Replica If an Improper Attestation is attempted on Home, the Updater will be slashed immediately. If an Improper Attestation is submitted to the Replica, it should be relayed to the Home contract using this function in order to slash the Updater with an Improper Attestation."},"root()":{"notice":"Calculates and returns tree's current root"},"setUpdater(address)":{"notice":"Set a new Updater"},"setUpdaterManager(address)":{"notice":"Set a new UpdaterManager contract"},"suggestUpdate()":{"notice":"Suggest an update for the Updater to sign and submit."}},"version":1},"developerDoc":{"events":{"Dispatch(bytes32,uint256,uint64,bytes,bytes)":{"params":{"destinationAndNonce":"Destination and destination-specific        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)","leafIndex":"Index of message's leaf in merkle tree","message":"Raw bytes of message","messageHash":"Hash of message; the leaf inserted to the Merkle tree        for the message","tips":"Tips paid for the remote off-chain agents"}},"ImproperAttestation(address,bytes)":{"params":{"attestation":"Attestation data and signature","updater":"Updater who signed improper attestation"}},"NewUpdaterManager(address)":{"params":{"updaterManager":"The address of the new updaterManager"}},"UpdaterSlashed(address,address)":{"params":{"reporter":"The address of the entity that reported the updater misbehavior","updater":"The address of the updater"}}},"kind":"dev","methods":{"dispatch(uint32,bytes32,uint32,bytes,bytes)":{"details":"Format the message, insert its hash into Merkle tree, enqueue the new Merkle root, and emit `Dispatch` event with message information.","params":{"_destinationDomain":"Domain of destination chain","_messageBody":"Raw bytes content of message","_recipientAddress":"Address of recipient on destination chain as bytes32"}},"improperAttestation(address,bytes)":{"details":"Reverts (and doesn't slash updater) if signature is invalid or update not current","params":{"_attestation":"Attestation data and signature","_updater":"Updater who signed the attestation"},"returns":{"_0":"TRUE if update was an Improper Attestation (implying Updater was slashed)"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"setUpdater(address)":{"details":"To be set when rotating Updater after Fraud","params":{"_updater":"the new Updater"}},"setUpdaterManager(address)":{"details":"Home(s) will initially be initialized using a trusted UpdaterManager contract; we will progressively decentralize by swapping the trusted contract with a new implementation that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation","params":{"_updaterManager":"the new UpdaterManager contract"}},"suggestUpdate()":{"details":"If no messages have been sent, null bytes returned for both","returns":{"_nonce":"Current nonce","_root":"Current merkle root"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_localDomain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationAndNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tips\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Dispatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"ImproperAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldUpdater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"NewUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updaterManager\",\"type\":\"address\"}],\"name\":\"NewUpdaterManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"homeDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"UpdaterSlashed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MESSAGE_BODY_BYTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_optimisticSeconds\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_tips\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_messageBody\",\"type\":\"bytes\"}],\"name\":\"dispatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeDomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_attestation\",\"type\":\"bytes\"}],\"name\":\"improperAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUpdaterManager\",\"name\":\"_updaterManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISystemMessenger\",\"name\":\"_systemMessenger\",\"type\":\"address\"}],\"name\":\"setSystemMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updaterManager\",\"type\":\"address\"}],\"name\":\"setUpdaterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Home.States\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suggestUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemMessenger\",\"outputs\":[{\"internalType\":\"contract ISystemMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaterManager\",\"outputs\":[{\"internalType\":\"contract IUpdaterManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Dispatch(bytes32,uint256,uint64,bytes,bytes)\":{\"params\":{\"destinationAndNonce\":\"Destination and destination-specific        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\",\"leafIndex\":\"Index of message's leaf in merkle tree\",\"message\":\"Raw bytes of message\",\"messageHash\":\"Hash of message; the leaf inserted to the Merkle tree        for the message\",\"tips\":\"Tips paid for the remote off-chain agents\"}},\"ImproperAttestation(address,bytes)\":{\"params\":{\"attestation\":\"Attestation data and signature\",\"updater\":\"Updater who signed improper attestation\"}},\"NewUpdaterManager(address)\":{\"params\":{\"updaterManager\":\"The address of the new updaterManager\"}},\"UpdaterSlashed(address,address)\":{\"params\":{\"reporter\":\"The address of the entity that reported the updater misbehavior\",\"updater\":\"The address of the updater\"}}},\"kind\":\"dev\",\"methods\":{\"dispatch(uint32,bytes32,uint32,bytes,bytes)\":{\"details\":\"Format the message, insert its hash into Merkle tree, enqueue the new Merkle root, and emit `Dispatch` event with message information.\",\"params\":{\"_destinationDomain\":\"Domain of destination chain\",\"_messageBody\":\"Raw bytes content of message\",\"_recipientAddress\":\"Address of recipient on destination chain as bytes32\"}},\"improperAttestation(address,bytes)\":{\"details\":\"Reverts (and doesn't slash updater) if signature is invalid or update not current\",\"params\":{\"_attestation\":\"Attestation data and signature\",\"_updater\":\"Updater who signed the attestation\"},\"returns\":{\"_0\":\"TRUE if update was an Improper Attestation (implying Updater was slashed)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"setUpdater(address)\":{\"details\":\"To be set when rotating Updater after Fraud\",\"params\":{\"_updater\":\"the new Updater\"}},\"setUpdaterManager(address)\":{\"details\":\"Home(s) will initially be initialized using a trusted UpdaterManager contract; we will progressively decentralize by swapping the trusted contract with a new implementation that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\",\"params\":{\"_updaterManager\":\"the new UpdaterManager contract\"}},\"suggestUpdate()\":{\"details\":\"If no messages have been sent, null bytes returned for both\",\"returns\":{\"_nonce\":\"Current nonce\",\"_root\":\"Current merkle root\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Dispatch(bytes32,uint256,uint64,bytes,bytes)\":{\"notice\":\"Emitted when a new message is dispatched via Nomad\"},\"ImproperAttestation(address,bytes)\":{\"notice\":\"Emitted when proof of an improper attestation is submitted, which sets the contract to FAILED state\"},\"NewUpdater(address,address)\":{\"notice\":\"Emitted when Updater is rotated\"},\"NewUpdaterManager(address)\":{\"notice\":\"Emitted when the UpdaterManager contract is changed\"},\"Update(uint32,uint32,bytes32,bytes)\":{\"notice\":\"Emitted when update is made on Home or unconfirmed update root is submitted on Replica\"},\"UpdaterSlashed(address,address)\":{\"notice\":\"Emitted when the Updater is slashed (should be paired with ImproperUpdater or DoubleUpdate event)\"}},\"kind\":\"user\",\"methods\":{\"count()\":{\"notice\":\"Returns the number of inserted leaves in the tree (current index)\"},\"dispatch(uint32,bytes32,uint32,bytes,bytes)\":{\"notice\":\"Dispatch the message to the destination domain \u0026 recipient\"},\"homeDomainHash()\":{\"notice\":\"Hash of Home domain concatenated with \\\"SYN\\\"\"},\"improperAttestation(address,bytes)\":{\"notice\":\"Check if an Attestation is an Improper Attestation; if so, slash the Updater and set the contract to FAILED state. An Improper Attestation is a (_nonce, _root) update that doesn't correspond with the historical state of Home contract. Either of those needs to be true: - _nonce is higher than current nonce (no root exists for this nonce) - _root is not equal to the historical root of _nonce This would mean that message(s) that were not truly dispatched on Home were falsely included in the signed root. An Improper Attestation will only be accepted as valid by the Replica If an Improper Attestation is attempted on Home, the Updater will be slashed immediately. If an Improper Attestation is submitted to the Replica, it should be relayed to the Home contract using this function in order to slash the Updater with an Improper Attestation.\"},\"root()\":{\"notice\":\"Calculates and returns tree's current root\"},\"setUpdater(address)\":{\"notice\":\"Set a new Updater\"},\"setUpdaterManager(address)\":{\"notice\":\"Set a new UpdaterManager contract\"},\"suggestUpdate()\":{\"notice\":\"Suggest an update for the Updater to sign and submit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Home\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"MAX_MESSAGE_BODY_BYTES()":"522ae002","VERSION()":"ffa1ad74","count()":"06661abd","dispatch(uint32,bytes32,uint32,bytes,bytes)":"f7560e40","historicalRoots(uint256)":"7ea97f40","homeDomainHash()":"45630b1a","improperAttestation(address,bytes)":"88a278ec","initialize(address)":"c4d66de8","localDomain()":"8d3638f4","nonce()":"affed0e0","owner()":"8da5cb5b","renounceOwnership()":"715018a6","root()":"ebf0c717","setSystemMessenger(address)":"b7bc563e","setUpdater(address)":"9d54f419","setUpdaterManager(address)":"9776120e","state()":"c19d93fb","suggestUpdate()":"36e104de","systemMessenger()":"ccbdf9c9","transferOwnership(address)":"f2fde38b","tree()":"fd54b228","updater()":"df034cd0","updaterManager()":"9df6c8e1"}},"solidity/UpdaterManager.sol:ISystemMessenger":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"_destDomain","type":"uint32"},{"internalType":"enum ISystemMessenger.SystemContracts","name":"_recipient","type":"uint8"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"sendSystemMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"sendSystemMessage(uint32,uint8,bytes)":{"notice":"Send System Message to one of the System Contracts on origin chain"}},"version":1},"developerDoc":{"kind":"dev","methods":{"sendSystemMessage(uint32,uint8,bytes)":{"details":"Note that knowledge of recipient address is not required,          routing will be done by SystemMessenger on destination chain.","params":{"_destDomain":"Domain of destination chain","_payload":"Data for calling recipient on destination chain","_recipient":"System contract type of the recipient"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destDomain\",\"type\":\"uint32\"},{\"internalType\":\"enum ISystemMessenger.SystemContracts\",\"name\":\"_recipient\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"sendSystemMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendSystemMessage(uint32,uint8,bytes)\":{\"details\":\"Note that knowledge of recipient address is not required,          routing will be done by SystemMessenger on destination chain.\",\"params\":{\"_destDomain\":\"Domain of destination chain\",\"_payload\":\"Data for calling recipient on destination chain\",\"_recipient\":\"System contract type of the recipient\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sendSystemMessage(uint32,uint8,bytes)\":{\"notice\":\"Send System Message to one of the System Contracts on origin chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"ISystemMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"sendSystemMessage(uint32,uint8,bytes)":"0d1e27a7"}},"solidity/UpdaterManager.sol:IUpdaterManager":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address payable","name":"_reporter","type":"address"}],"name":"slashUpdater","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updater","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"slashUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"IUpdaterManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"slashUpdater(address)":"5b3c2cbf","updater()":"df034cd0"}},"solidity/UpdaterManager.sol:Initializable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:MerkleLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d232079220317259d60fd07f723db0932ef201fa9c59e85665463ce2cf83b4ae64736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d232079220317259d60fd07f723db0932ef201fa9c59e85665463ce2cf83b4ae64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"87641:8018:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;87641:8018:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"87641:8018:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"MerkleLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:MerkleTreeManager":{"code":"0x608060405234801561001057600080fd5b506106f8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780637ea97f4014610067578063ebf0c7171461007a578063fd54b22814610082575b600080fd5b6020545b60405190815260200160405180910390f35b61005561007536600461067a565b61008c565b6100556100ad565b6020546100559081565b6021818154811061009c57600080fd5b600091825260209091200154905081565b60006100b960006100be565b905090565b60006100d1826100cc6100d7565b610598565b92915050565b6100df61065b565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b602081101561065357600182821c8116908190036105ff578582602081106105cc576105cc610693565b0154604080516020810192909252810185905260600160405160208183030381529060405280519060200120935061064a565b8385836020811061061257610612610693565b6020020151604051602001610631929190918252602082015260400190565b6040516020818303038152906040528051906020012093505b506001016105a2565b505092915050565b6040518061040001604052806020906020820280368337509192915050565b60006020828403121561068c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220492d7794e3c4e74bf22ef955ca7f7ae9dc06e871bae01165c60afd0db0c512cc64736f6c634300080d0033","runtime-code":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd146100515780637ea97f4014610067578063ebf0c7171461007a578063fd54b22814610082575b600080fd5b6020545b60405190815260200160405180910390f35b61005561007536600461067a565b61008c565b6100556100ad565b6020546100559081565b6021818154811061009c57600080fd5b600091825260209091200154905081565b60006100b960006100be565b905090565b60006100d1826100cc6100d7565b610598565b92915050565b6100df61065b565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b602081101561065357600182821c8116908190036105ff578582602081106105cc576105cc610693565b0154604080516020810192909252810185905260600160405160208183030381529060405280519060200120935061064a565b8385836020811061061257610612610693565b6020020151604051602001610631929190918252602082015260400190565b6040516020818303038152906040528051906020012093505b506001016105a2565b505092915050565b6040518061040001604052806020906020820280368337509192915050565b60006020828403121561068c57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220492d7794e3c4e74bf22ef955ca7f7ae9dc06e871bae01165c60afd0db0c512cc64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"102891:968:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"102891:968:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103496:81;103560:10;;103496:81;;;160:25:1;;;148:2;133:18;103496:81:0;;;;;;;103040:32;;;;;;:::i;:::-;;:::i;103312:81::-;;;:::i;103008:26::-;;;;;;;103040:32;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;103040:32:0;:::o;103312:81::-;103349:7;103375:11;:4;:9;:11::i;:::-;103368:18;;103312:81;:::o;89780:122::-;89837:7;89863:32;89875:5;89882:12;:10;:12::i;:::-;89863:11;:32::i;:::-;89856:39;89780:122;-1:-1:-1;;89780:122:0:o;90020:964::-;90065:34;;:::i;:::-;90124:3;90111:16;;90150:3;90111:10;90137;;:16;90176:3;90163:10;;;:16;90202:3;90189:10;;;:16;90228:3;90215:10;;;:16;90254:3;90241:10;;;:16;90280:3;90267:10;;;:16;90306:3;90293:10;;;:16;90332:3;90319:10;;;:16;90358:3;90345:10;;;:16;90385:4;90371:11;;;:18;90413:4;90399:11;;;:18;90441:4;90427:11;;;:18;90469:4;90455:11;;;:18;90497:4;90483:11;;;:18;90525:4;90511:11;;;:18;90553:4;90539:11;;;:18;90581:4;90567:11;;;:18;90609:4;90595:11;;;:18;90637:4;90623:11;;;:18;90665:4;90651:11;;;:18;90693:4;90679:11;;;:18;90721:4;90707:11;;;:18;90749:4;90735:11;;;:18;90777:4;90763:11;;;:18;90805:4;90791:11;;;:18;90833:4;90819:11;;;:18;90861:4;90847:11;;;:18;90889:4;90875:11;;;:18;90917:4;90903:11;;;:18;90945:4;90931:11;;;:18;90973:4;90959:11;;;:18;90111:7;90020:964::o;89124:589::-;89297:11;;;;89248:16;;;89319:388;87704:2;89339:1;:14;89319:388;;;89405:4;89390:11;;;89389:20;;;89427:12;;;89423:215;;89497:5;89510:1;89497:15;;;;;;;:::i;:::-;;;89480:43;;;;;;909:19:1;;;;944:12;;937:28;;;981:12;;89480:43:0;;;;;;;;;;;;89470:54;;;;;;89459:65;;89423:215;;;89601:8;89611:7;89619:1;89611:10;;;;;;;:::i;:::-;;;;;89584:38;;;;;;;;909:19:1;;;953:2;944:12;;937:28;990:2;981:12;;752:247;89584:38:0;;;;;;;;;;;;;89574:49;;;;;;89563:60;;89423:215;-1:-1:-1;89679:3:0;;89319:388;;;;89270:443;89124:589;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;196:180:1:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:1;;196:180;-1:-1:-1;196:180:1:o;563:184::-;615:77;612:1;605:88;712:4;709:1;702:15;736:4;733:1;726:15","abiDefinition":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"historicalRoots","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tree","outputs":[{"internalType":"uint256","name":"count","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"count()":{"notice":"Returns the number of inserted leaves in the tree (current index)"},"root()":{"notice":"Calculates and returns tree's current root"}},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"count()\":{\"notice\":\"Returns the number of inserted leaves in the tree (current index)\"},\"root()\":{\"notice\":\"Calculates and returns tree's current root\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"MerkleTreeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"count()":"06661abd","historicalRoots(uint256)":"7ea97f40","root()":"ebf0c717","tree()":"fd54b228"}},"solidity/UpdaterManager.sol:Message":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080b236a48dad5a2d2a05ad696ccb74de3a17588096d5ca64b6734df9a194f96964736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080b236a48dad5a2d2a05ad696ccb74de3a17588096d5ca64b6734df9a194f96964736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"34355:4971:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;34355:4971:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"34355:4971:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"HEADER_OFFSET":{"details":"This value reflects the header offset in the latest message version"},"MESSAGE_VERSION":{"details":"This is only updated if the whole message structure is changed,      i.e. if a new part is added.      If already existing part is changed, the message version does not get bumped."},"TWO_BYTES":{"details":"How much bytes is used for storing the version, or a single offset value"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"HEADER_OFFSET\":{\"details\":\"This value reflects the header offset in the latest message version\"},\"MESSAGE_VERSION\":{\"details\":\"This is only updated if the whole message structure is changed,      i.e. if a new part is added.      If already existing part is changed, the message version does not get bumped.\"},\"TWO_BYTES\":{\"details\":\"How much bytes is used for storing the version, or a single offset value\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Message\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/UpdaterManager.sol:OwnableUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/UpdaterManager.sol:QueueLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207af0d39632b1aef890f386061a38cd77f29d383885868e98acc80f8f19a656b464736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207af0d39632b1aef890f386061a38cd77f29d383885868e98acc80f8f19a656b464736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"81836:5803:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;81836:5803:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"81836:5803:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[],"name":"Empty","type":"error"},{"inputs":[],"name":"OutOfBounds","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"errors":{"Empty()":[{"details":"An operation (e.g. {front}) couldn't be completed due to the queue being empty."}],"OutOfBounds()":[{"details":"An operation (e.g. {at}) couldn't be completed due to an index being out of bounds."}]},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}],\"OutOfBounds()\":[{\"details\":\"An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"QueueLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Strings":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf51d42954b0fa0a37593c36e5999b0c585d103e7734061f88350cf7c695f5ca64736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf51d42954b0fa0a37593c36e5999b0c585d103e7734061f88350cf7c695f5ca64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"42725:1885:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;42725:1885:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"42725:1885:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:SystemMessage":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078df705004e5b97820d1746d178062cac3fb2077a7db894e7cdabbc3ad98bcec64736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078df705004e5b97820d1746d178062cac3fb2077a7db894e7cdabbc3ad98bcec64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"98662:4227:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;98662:4227:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"98662:4227:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_BODY":{"details":"SystemMessage memory layout [000 .. 001): messageType    uint8   1 bytes [001 .. END]: messageBody    bytes   ? bytes"},"OFFSET_CALL_PAYLOAD":{"details":"SystemMessageType.Call memory layout [000 .. 001): recipient      uint8   1 bytes [001 .. END]: payload        bytes   ? bytes"},"SYSTEM_SENDER":{"details":"Custom address, used for receiving and sending system messages.      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.      Note: all bits except for lower 20 bytes are set to 1.      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_BODY\":{\"details\":\"SystemMessage memory layout [000 .. 001): messageType    uint8   1 bytes [001 .. END]: messageBody    bytes   ? bytes\"},\"OFFSET_CALL_PAYLOAD\":{\"details\":\"SystemMessageType.Call memory layout [000 .. 001): recipient      uint8   1 bytes [001 .. END]: payload        bytes   ? bytes\"},\"SYSTEM_SENDER\":{\"details\":\"Custom address, used for receiving and sending system messages.      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.      Note: all bits except for lower 20 bytes are set to 1.      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"SystemMessage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:Tips":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029ec1bc6b7e7ea65d3909c8a6f263b59a4c7832f067ef2aa1d4a5a959a5346f464736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029ec1bc6b7e7ea65d3909c8a6f263b59a4c7832f067ef2aa1d4a5a959a5346f464736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"95661:2999:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;95661:2999:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"95661:2999:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_UPDATER":{"details":"Tips memory layout [000 .. 002): version            uint16\t 2 bytes [002 .. 014): updaterTip         uint96\t12 bytes [014 .. 026): relayerTip         uint96\t12 bytes [026 .. 038): proverTip          uint96\t12 bytes [038 .. 050): processorTip       uint96\t12 bytes"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_UPDATER\":{\"details\":\"Tips memory layout [000 .. 002): version            uint16\\t 2 bytes [002 .. 014): updaterTip         uint96\\t12 bytes [014 .. 026): relayerTip         uint96\\t12 bytes [026 .. 038): proverTip          uint96\\t12 bytes [038 .. 050): processorTip       uint96\\t12 bytes\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Tips\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7a2ba46739db19df5c80cbbe17786f419874560d52af3bb700d418e8f3aab3564736f6c634300080d0033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c7a2ba46739db19df5c80cbbe17786f419874560d52af3bb700d418e8f3aab3564736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"33243:1110:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;33243:1110:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"33243:1110:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"TypeCasts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{}},"solidity/UpdaterManager.sol:TypedMemView":{"code":"0x60c9610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b605e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000909116815260200160405180910390f3fea26469706673582212204f81d8aa508b360d6fae8bd532373395af11d7250408eb57327a506d625bdaa564736f6c634300080d0033","runtime-code":"0x730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b605e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000909116815260200160405180910390f3fea26469706673582212204f81d8aa508b360d6fae8bd532373395af11d7250408eb57327a506d625bdaa564736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"995:32242:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;995:32242:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"995:32242:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;3508:94;;;;;;;;198:66:1;186:79;;;168:98;;156:2;141:18;3508:94:0;;;;;;","abiDefinition":[{"inputs":[],"name":"NULL","outputs":[{"internalType":"bytes29","name":"","type":"bytes29"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"TypedMemView\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"NULL()":"f26be3fc"}},"solidity/UpdaterManager.sol:UpdaterManager":{"code":"0x60806040526040516108a83803806108a8833981016040819052610022916100a0565b61002b33610050565b600280546001600160a01b0319166001600160a01b03929092169190911790556100d0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100b257600080fd5b81516001600160a01b03811681146100c957600080fd5b9392505050565b6107c9806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639d54f4191161005b5780639d54f419146101005780639fa92f9d14610113578063df034cd014610133578063f2fde38b1461015157600080fd5b80635b3c2cbf1461008d5780636ef0f37f146100a2578063715018a6146100b55780638da5cb5b146100bd575b600080fd5b6100a061009b36600461076f565b610164565b005b6100a06100b036600461076f565b610237565b6100a06103a9565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100a061010e36600461076f565b61042c565b6001546100d79073ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff166100d7565b6100a061015f36600461076f565b6105a8565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f21686f6d6500000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff821681527f4180932f5f5f11458bcd408e42c54626987799e7c4c89f40f484fefdfdfff14f906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b73ffffffffffffffffffffffffffffffffffffffff81163b610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f21636f6e747261637420686f6d6500000000000000000000000000000000000060448201526064016101e1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa6c230e5615262e310dcb42eaf014e813e5d8580abf5b00d2186ca8e9833de219060200161022c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092556001546040517f9d54f419000000000000000000000000000000000000000000000000000000008152600481019290925290911690639d54f41990602401600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f9e5f57e4ee5f9eeac3131028d48f19d80820ce6fa93c4c66cc82a3e2b9837c329250602001905061022c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b73ffffffffffffffffffffffffffffffffffffffff81166106cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101e1565b6106d5816106d8565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff811681146106d557600080fd5b60006020828403121561078157600080fd5b813561078c8161074d565b939250505056fea2646970667358221220420bbb2022588888c63f760995d15b831450110242c3031af5e69d5af5b7023b64736f6c634300080d0033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639d54f4191161005b5780639d54f419146101005780639fa92f9d14610113578063df034cd014610133578063f2fde38b1461015157600080fd5b80635b3c2cbf1461008d5780636ef0f37f146100a2578063715018a6146100b55780638da5cb5b146100bd575b600080fd5b6100a061009b36600461076f565b610164565b005b6100a06100b036600461076f565b610237565b6100a06103a9565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100a061010e36600461076f565b61042c565b6001546100d79073ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff166100d7565b6100a061015f36600461076f565b6105a8565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f21686f6d6500000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff821681527f4180932f5f5f11458bcd408e42c54626987799e7c4c89f40f484fefdfdfff14f906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b73ffffffffffffffffffffffffffffffffffffffff81163b610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f21636f6e747261637420686f6d6500000000000000000000000000000000000060448201526064016101e1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa6c230e5615262e310dcb42eaf014e813e5d8580abf5b00d2186ca8e9833de219060200161022c565b60005473ffffffffffffffffffffffffffffffffffffffff16331461042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092556001546040517f9d54f419000000000000000000000000000000000000000000000000000000008152600481019290925290911690639d54f41990602401600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f9e5f57e4ee5f9eeac3131028d48f19d80820ce6fa93c4c66cc82a3e2b9837c329250602001905061022c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101e1565b73ffffffffffffffffffffffffffffffffffffffff81166106cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101e1565b6106d5816106d8565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff811681146106d557600080fd5b60006020828403121561078157600080fd5b813561078c8161074d565b939250505056fea2646970667358221220420bbb2022588888c63f760995d15b831450110242c3031af5e69d5af5b7023b64736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"127701:2751:0:-:0;;;128720:98;;;;;;;;;;;;;;;;;;:::i;:::-;125877:32;125469:10;125877:18;:32::i;:::-;128785:8:::1;:26:::0;;-1:-1:-1;;;;;;128785:26:0::1;-1:-1:-1::0;;;;;128785:26:0;;;::::1;::::0;;;::::1;::::0;;127701:2751;;127226:187;127299:16;127318:6;;-1:-1:-1;;;;;127334:17:0;;;-1:-1:-1;;;;;;127334:17:0;;;;;;127366:40;;127318:6;;;;;;;127366:40;;127299:16;127366:40;127289:124;127226:187;:::o;14:290:1:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:1;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:1:o;:::-;127701:2751:0;;;;;;","srcMapRuntime":"127701:2751:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;129871:120;;;;;;:::i;:::-;;:::i;:::-;;129051:172;;;;;;:::i;:::-;;:::i;130366:84::-;;;:::i;125992:85::-;126038:7;126064:6;;;125992:85;;;885:42:1;873:55;;;855:74;;843:2;828:18;125992:85:0;;;;;;;129397:197;;;;;;:::i;:::-;;:::i;127840:19::-;;;;;;;;;130094:92;130171:8;;;;130094:92;;126874:198;;;;;;:::i;:::-;;:::i;129871:120::-;128636:4;;;;128622:10;:18;128614:36;;;;;;;1142:2:1;128614:36:0;;;1124:21:1;1181:1;1161:18;;;1154:29;1219:7;1199:18;;;1192:35;1244:18;;128614:36:0;;;;;;;;;129962:22:::1;::::0;885:42:1;873:55;;855:74;;129962:22:0::1;::::0;843:2:1;828:18;129962:22:0::1;;;;;;;;129871:120:::0;:::o;129051:172::-;126038:7;126064:6;126204:23;126064:6;125469:10;126204:23;126196:68;;;;;;;1714:2:1;126196:68:0;;;1696:21:1;;;1733:18;;;1726:30;1792:34;1772:18;;;1765:62;1844:18;;126196:68:0;1512:356:1;126196:68:0;105132:19;;;;129112:52:::1;;;::::0;::::1;::::0;;2075:2:1;129112:52:0::1;::::0;::::1;2057:21:1::0;2114:2;2094:18;;;2087:30;2153:16;2133:18;;;2126:44;2187:18;;129112:52:0::1;1873:338:1::0;129112:52:0::1;129174:4;:12:::0;;;::::1;;::::0;::::1;::::0;;::::1;::::0;;;129202:14:::1;::::0;855:74:1;;;129202:14:0::1;::::0;843:2:1;828:18;129202:14:0::1;709:226:1::0;130366:84:0;126038:7;126064:6;126204:23;126064:6;125469:10;126204:23;126196:68;;;;;;;1714:2:1;126196:68:0;;;1696:21:1;;;1733:18;;;1726:30;1792:34;1772:18;;;1765:62;1844:18;;126196:68:0;1512:356:1;126196:68:0;130366:84::o;129397:197::-;126038:7;126064:6;126204:23;126064:6;125469:10;126204:23;126196:68;;;;;;;1714:2:1;126196:68:0;;;1696:21:1;;;1733:18;;;1726:30;1792:34;1772:18;;;1765:62;1844:18;;126196:68:0;1512:356:1;126196:68:0;129471:8:::1;:26:::0;;;::::1;;::::0;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;129512:4:0;129507:38:::1;::::0;;;;::::1;::::0;::::1;855:74:1::0;;;;129512:4:0;;::::1;::::0;129507:21:::1;::::0;828:18:1;;129507:38:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;129560:27:0::1;::::0;885:42:1;873:55;;855:74;;129560:27:0::1;::::0;-1:-1:-1;843:2:1;828:18;;-1:-1:-1;129560:27:0::1;709:226:1::0;126874:198:0;126038:7;126064:6;126204:23;126064:6;125469:10;126204:23;126196:68;;;;;;;1714:2:1;126196:68:0;;;1696:21:1;;;1733:18;;;1726:30;1792:34;1772:18;;;1765:62;1844:18;;126196:68:0;1512:356:1;126196:68:0;126962:22:::1;::::0;::::1;126954:73;;;::::0;::::1;::::0;;2418:2:1;126954:73:0::1;::::0;::::1;2400:21:1::0;2457:2;2437:18;;;2430:30;2496:34;2476:18;;;2469:62;2567:8;2547:18;;;2540:36;2593:19;;126954:73:0::1;2216:402:1::0;126954:73:0::1;127037:28;127056:8;127037:18;:28::i;:::-;126874:198:::0;:::o;127226:187::-;127299:16;127318:6;;;127334:17;;;;;;;;;;127366:40;;127318:6;;;;;;;127366:40;;127299:16;127366:40;127289:124;127226:187;:::o;14:162:1:-;108:42;101:5;97:54;90:5;87:65;77:93;;166:1;163;156:12;181:263;248:6;301:2;289:9;280:7;276:23;272:32;269:52;;;317:1;314;307:12;269:52;356:9;343:23;375:39;408:5;375:39;:::i;:::-;433:5;181:263;-1:-1:-1;;;181:263:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"_updaterAddress","type":"address"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"reporter","type":"address"}],"name":"FakeSlashed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"home","type":"address"}],"name":"NewHome","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"updater","type":"address"}],"name":"NewUpdater","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"home","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_home","type":"address"}],"name":"setHome","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_updaterAddress","type":"address"}],"name":"setUpdater","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"_reporter","type":"address"}],"name":"slashUpdater","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updater","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"FakeSlashed(address)":{"notice":"Emitted when slashUpdater is called"},"NewHome(address)":{"notice":"Emitted when a new home is set"},"NewUpdater(address)":{"notice":"Emitted when a new updater is set"}},"kind":"user","methods":{"setHome(address)":{"notice":"Set the address of the a new home contract"},"setUpdater(address)":{"notice":"Set the address of a new updater"},"slashUpdater(address)":{"notice":"Slashes the updater"},"updater()":{"notice":"Get address of current updater"}},"notice":"MVP / centralized version of contract that will manage Updater bonding, slashing, selection and rotation","version":1},"developerDoc":{"author":"Illusory Systems Inc.","events":{"NewHome(address)":{"params":{"home":"The address of the new home contract"}},"NewUpdater(address)":{"params":{"updater":"The address of the new updater"}}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"should be impossible to renounce ownership; we override OpenZeppelin Ownable implementation of renounceOwnership to make it a no-op"},"setHome(address)":{"details":"only callable by trusted owner","params":{"_home":"The address of the new home contract"}},"setUpdater(address)":{"details":"only callable by trusted owner","params":{"_updaterAddress":"The address of the new updater"}},"slashUpdater(address)":{"details":"Currently does nothing, functionality will be implemented later when updater bonding and rotation are also implemented","params":{"_reporter":"The address of the entity that reported the updater fraud"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updater()":{"returns":{"_0":"the updater address"}}},"title":"UpdaterManager","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updaterAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"FakeSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"home\",\"type\":\"address\"}],\"name\":\"NewHome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"NewUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"home\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_home\",\"type\":\"address\"}],\"name\":\"setHome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updaterAddress\",\"type\":\"address\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"slashUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Illusory Systems Inc.\",\"events\":{\"NewHome(address)\":{\"params\":{\"home\":\"The address of the new home contract\"}},\"NewUpdater(address)\":{\"params\":{\"updater\":\"The address of the new updater\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"should be impossible to renounce ownership; we override OpenZeppelin Ownable implementation of renounceOwnership to make it a no-op\"},\"setHome(address)\":{\"details\":\"only callable by trusted owner\",\"params\":{\"_home\":\"The address of the new home contract\"}},\"setUpdater(address)\":{\"details\":\"only callable by trusted owner\",\"params\":{\"_updaterAddress\":\"The address of the new updater\"}},\"slashUpdater(address)\":{\"details\":\"Currently does nothing, functionality will be implemented later when updater bonding and rotation are also implemented\",\"params\":{\"_reporter\":\"The address of the entity that reported the updater fraud\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updater()\":{\"returns\":{\"_0\":\"the updater address\"}}},\"title\":\"UpdaterManager\",\"version\":1},\"userdoc\":{\"events\":{\"FakeSlashed(address)\":{\"notice\":\"Emitted when slashUpdater is called\"},\"NewHome(address)\":{\"notice\":\"Emitted when a new home is set\"},\"NewUpdater(address)\":{\"notice\":\"Emitted when a new updater is set\"}},\"kind\":\"user\",\"methods\":{\"setHome(address)\":{\"notice\":\"Set the address of the a new home contract\"},\"setUpdater(address)\":{\"notice\":\"Set the address of a new updater\"},\"slashUpdater(address)\":{\"notice\":\"Slashes the updater\"},\"updater()\":{\"notice\":\"Get address of current updater\"}},\"notice\":\"MVP / centralized version of contract that will manage Updater bonding, slashing, selection and rotation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"UpdaterManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"home()":"9fa92f9d","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setHome(address)":"6ef0f37f","setUpdater(address)":"9d54f419","slashUpdater(address)":"5b3c2cbf","transferOwnership(address)":"f2fde38b","updater()":"df034cd0"}},"solidity/UpdaterManager.sol:UpdaterStorage":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldUpdater","type":"address"},{"indexed":false,"internalType":"address","name":"newUpdater","type":"address"}],"name":"NewUpdater","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"homeDomain","type":"uint32"},{"indexed":true,"internalType":"uint32","name":"nonce","type":"uint32"},{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"}],"name":"Update","type":"event"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ISystemMessenger","name":"_systemMessenger","type":"address"}],"name":"setSystemMessenger","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"systemMessenger","outputs":[{"internalType":"contract ISystemMessenger","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updater","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"NewUpdater(address,address)":{"notice":"Emitted when Updater is rotated"},"Update(uint32,uint32,bytes32,bytes)":{"notice":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica"}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"NewUpdater(address,address)":{"params":{"newUpdater":"The address of the new updater","oldUpdater":"The address of the old updater"}},"Update(uint32,uint32,bytes32,bytes)":{"params":{"homeDomain":"Domain of home contract","nonce":"Nonce of new merkle root","root":"New merkle root","signature":"Updater's signature on `homeDomain`, `nonce` and `root`"}}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldUpdater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"NewUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"homeDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISystemMessenger\",\"name\":\"_systemMessenger\",\"type\":\"address\"}],\"name\":\"setSystemMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemMessenger\",\"outputs\":[{\"internalType\":\"contract ISystemMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewUpdater(address,address)\":{\"params\":{\"newUpdater\":\"The address of the new updater\",\"oldUpdater\":\"The address of the old updater\"}},\"Update(uint32,uint32,bytes32,bytes)\":{\"params\":{\"homeDomain\":\"Domain of home contract\",\"nonce\":\"Nonce of new merkle root\",\"root\":\"New merkle root\",\"signature\":\"Updater's signature on `homeDomain`, `nonce` and `root`\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewUpdater(address,address)\":{\"notice\":\"Emitted when Updater is rotated\"},\"Update(uint32,uint32,bytes32,bytes)\":{\"notice\":\"Emitted when update is made on Home or unconfirmed update root is submitted on Replica\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"UpdaterStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"localDomain()":"8d3638f4","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSystemMessenger(address)":"b7bc563e","systemMessenger()":"ccbdf9c9","transferOwnership(address)":"f2fde38b","updater()":"df034cd0"}},"solidity/UpdaterManager.sol:Version0":{"code":"0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600081565b60405160ff909116815260200160405180910390f3fea2646970667358221220a96ad5a55c8a77f9e785cdb09500961e06697e6647d74582a4abe1057697e9c564736f6c634300080d0033","runtime-code":"0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600081565b60405160ff909116815260200160405180910390f3fea2646970667358221220a96ad5a55c8a77f9e785cdb09500961e06697e6647d74582a4abe1057697e9c564736f6c634300080d0033","info":{"source":"pragma solidity 0.8.13;\n\n\ninterface IUpdaterManager {\n    function slashUpdater(address payable _reporter) external;\n\n    function updater() external view returns (address);\n}\n\ncontract Version0 {\n    uint8 public constant VERSION = 0;\n}\n\ninterface ISystemMessenger {\n    /// @dev Potential senders/recipients of a system message\n    enum SystemContracts {\n        Home,\n        ReplicaManager\n    }\n\n    /**\n     * @notice  Send System Message to one of the System Contracts on origin chain\n     * @dev     Note that knowledge of recipient address is not required,\n     *          routing will be done by SystemMessenger on destination chain.\n     * @param _destDomain   Domain of destination chain\n     * @param _recipient    System contract type of the recipient\n     * @param _payload      Data for calling recipient on destination chain\n     */\n    function sendSystemMessage(\n        uint32 _destDomain,\n        SystemContracts _recipient,\n        bytes memory _payload\n    ) external;\n}\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\n    uint8 constant TWELVE_BYTES = 96;\n\n    /**\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _b    The byte\n     * @return      char - The encoded hex character\n     */\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\n        // This can probably be done more efficiently, but it's only in error\n        // paths, so we don't really care :)\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\n        if (_nibble == 0xf0) {\n            return 0x30;\n        } // 0\n        if (_nibble == 0xf1) {\n            return 0x31;\n        } // 1\n        if (_nibble == 0xf2) {\n            return 0x32;\n        } // 2\n        if (_nibble == 0xf3) {\n            return 0x33;\n        } // 3\n        if (_nibble == 0xf4) {\n            return 0x34;\n        } // 4\n        if (_nibble == 0xf5) {\n            return 0x35;\n        } // 5\n        if (_nibble == 0xf6) {\n            return 0x36;\n        } // 6\n        if (_nibble == 0xf7) {\n            return 0x37;\n        } // 7\n        if (_nibble == 0xf8) {\n            return 0x38;\n        } // 8\n        if (_nibble == 0xf9) {\n            return 0x39;\n        } // 9\n        if (_nibble == 0xfa) {\n            return 0x61;\n        } // a\n        if (_nibble == 0xfb) {\n            return 0x62;\n        } // b\n        if (_nibble == 0xfc) {\n            return 0x63;\n        } // c\n        if (_nibble == 0xfd) {\n            return 0x64;\n        } // d\n        if (_nibble == 0xfe) {\n            return 0x65;\n        } // e\n        if (_nibble == 0xff) {\n            return 0x66;\n        } // f\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // ugly. redo without assembly?\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // then | in the new type\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the top 5 bytes\n            newView := or(newView, shr(40, shl(40, memView)))\n            newView := or(newView, shl(216, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            newView := shl(96, or(newView, _type)) // insert type\n            newView := shl(96, or(newView, _loc)) // insert loc\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 216 == 256 - 40\n            _type := shr(216, memView) // shift out lower 24 bytes\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (left ^ right) \u003e\u003e (2 * TWELVE_BYTES) == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\n            _loc := and(shr(120, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        return (uint256(len(memView)) + 32) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            _len := and(shr(24, memView), _mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"TypedMemView/index - Attempted to index more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`. Requires that the view have \u003e= 20 bytes\n     *                  following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\n            digest := mload(ptr)\n        }\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"TypedMemView/copyTo - Null pointer deref\");\n        require(isValid(memView), \"TypedMemView/copyTo - Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile to copy\n            // guaranteed not to fail, so pop the success\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\n        }\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\n     *                  the new memory\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the legnth\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n//\n\nlibrary TypeCasts {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\n    }\n\n    // treat it as a null-terminated string of max 32 bytes\n    function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\n        uint8 _slen = 0;\n        while (_slen \u003c 32 \u0026\u0026 _buf[_slen] != 0) {\n            _slen++;\n        }\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            _newStr := mload(0x40)\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\n            mstore(_newStr, _slen)\n            mstore(add(_newStr, 0x20), _buf)\n        }\n    }\n\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\nlibrary Message {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev This is only updated if the whole message structure is changed,\n     *      i.e. if a new part is added.\n     *      If already existing part is changed, the message version does not get bumped.\n     */\n    uint16 internal constant MESSAGE_VERSION = 1;\n\n    /// @dev Parts.Last is used only for marking the last element of the enum\n    enum Parts {\n        Version,\n        Header,\n        Tips,\n        Body,\n        Last\n    }\n\n    uint40 internal constant MESSAGE_TYPE = 1337;\n    uint40 internal constant HEADER_TYPE = uint40(Parts.Header);\n    uint40 internal constant TIPS_TYPE = uint40(Parts.Tips);\n    uint40 internal constant BODY_TYPE = uint40(Parts.Body);\n\n    modifier onlyMessage(bytes29 _view) {\n        _view.assertType(MESSAGE_TYPE);\n        _;\n    }\n\n    /**\n     * @dev Message memory layout\n     *      All offsets are stored for backwards compatibility\n     * [000 .. 002): version            uint16  2 bytes\n     * [002 .. 004): header offset = 8  uint16  2 bytes\n     * [004 .. 006): tips offset (AAA)  uint16  2 bytes\n     * [006 .. 008): body offset (BBB)  uint16  2 bytes\n     * [008 .. AAA): header             bytes   ? bytes\n     * [AAA .. BBB): tips               bytes   ? bytes\n     * [BBB .. CCC): body               bytes   ? bytes\n     */\n\n    /// @dev How much bytes is used for storing the version, or a single offset value\n    uint8 internal constant TWO_BYTES = 2;\n    /// @dev This value reflects the header offset in the latest message version\n    uint16 internal constant HEADER_OFFSET = TWO_BYTES * uint8(Parts.Last);\n\n    /**\n     * @notice Returns formatted (packed) message with provided fields\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     **/\n    function formatMessage(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes memory) {\n        // Version + Offsets + Header + Tips are supposed to fit within 65535 bytes\n        uint16 tipsOffset = HEADER_OFFSET + uint16(_header.length);\n        uint16 bodyOffset = tipsOffset + uint16(_tips.length);\n        return\n            abi.encodePacked(\n                MESSAGE_VERSION,\n                HEADER_OFFSET,\n                tipsOffset,\n                bodyOffset,\n                _header,\n                _tips,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns leaf of formatted message with provided fields.\n     * @param _header Formatted header\n     * @param _messageBody Raw bytes of message body\n     * @return Leaf (hash) of formatted message\n     **/\n    function messageHash(\n        bytes memory _header,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) internal pure returns (bytes32) {\n        return keccak256(formatMessage(_header, _tips, _messageBody));\n    }\n\n    function messageView(bytes memory _message) internal pure returns (bytes29) {\n        return _message.ref(MESSAGE_TYPE);\n    }\n\n    /// @notice Returns message's header field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function header(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Header),\n                _loadOffset(_message, Parts.Tips),\n                HEADER_TYPE\n            );\n    }\n\n    /// @notice Returns message's tips field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function tips(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return\n            _between(\n                _message,\n                _loadOffset(_message, Parts.Tips),\n                _loadOffset(_message, Parts.Body),\n                TIPS_TYPE\n            );\n    }\n\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\n    function body(bytes29 _message) internal pure onlyMessage(_message) returns (bytes29) {\n        return _between(_message, _loadOffset(_message, Parts.Body), _message.len(), BODY_TYPE);\n    }\n\n    /// @notice Returns leaf of the formatted message.\n    function leaf(bytes29 _message) internal pure onlyMessage(_message) returns (bytes32) {\n        // TODO: do we actually need this?\n        return _message.keccak();\n    }\n\n    function _between(\n        bytes29 _message,\n        uint256 _from,\n        uint256 _to,\n        uint40 _newType\n    ) private pure returns (bytes29) {\n        return _message.slice(_from, _to - _from, _newType);\n    }\n\n    /// @notice Loads offset for a given part of the message\n    function _loadOffset(bytes29 _message, Parts _part) private pure returns (uint256) {\n        return _message.indexUint(uint256(_part) * TWO_BYTES, TWO_BYTES);\n    }\n}\n\nlibrary Header {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant HEADER_VERSION = 1;\n\n    /**\n     * @dev Header memory layout\n     * [000 .. 002): version            uint16   2 bytes\n     * [002 .. 006): originDomain       uint32   4 bytes\n     * [006 .. 038): sender             bytes32 32 bytes\n     * [038 .. 042): nonce              uint32   4 bytes\n     * [042 .. 046): destinationDomain  uint32   4 bytes\n     * [046 .. 078): recipient          bytes32 32 bytes\n     * [078 .. 082): optimisticSeconds  uint32   4 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 2;\n    uint256 internal constant OFFSET_SENDER = 6;\n    uint256 internal constant OFFSET_NONCE = 38;\n    uint256 internal constant OFFSET_DESTINATION = 42;\n    uint256 internal constant OFFSET_RECIPIENT = 46;\n    uint256 internal constant OFFSET_OPTIMISTIC_SECONDS = 78;\n\n    modifier onlyHeader(bytes29 _view) {\n        _view.assertType(Message.HEADER_TYPE);\n        _;\n    }\n\n    function formatHeader(\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _nonce,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint32 _optimisticSeconds\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                HEADER_VERSION,\n                _originDomain,\n                _sender,\n                _nonce,\n                _destinationDomain,\n                _recipient,\n                _optimisticSeconds\n            );\n    }\n\n    function headerView(bytes memory _header) internal pure returns (bytes29) {\n        return _header.ref(Message.HEADER_TYPE);\n    }\n\n    function headerVersion(bytes29 _header) internal pure onlyHeader(_header) returns (uint16) {\n        return uint16(_header.indexUint(0, 2));\n    }\n\n    /// @notice Returns header's origin field\n    function origin(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_ORIGIN, 4));\n    }\n\n    /// @notice Returns header's sender field\n    function sender(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_SENDER, 32);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /// @notice Returns header's destination field\n    function destination(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_DESTINATION, 4));\n    }\n\n    /// @notice Returns header's recipient field as bytes32\n    function recipient(bytes29 _header) internal pure onlyHeader(_header) returns (bytes32) {\n        return _header.index(OFFSET_RECIPIENT, 32);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticSeconds(bytes29 _header) internal pure onlyHeader(_header) returns (uint32) {\n        return uint32(_header.indexUint(OFFSET_OPTIMISTIC_SECONDS, 4));\n    }\n\n    /// @notice Returns header's recipient field as an address\n    function recipientAddress(bytes29 _header) internal pure returns (address) {\n        return TypeCasts.bytes32ToAddress(recipient(_header));\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\nabstract contract UpdaterStorage is Initializable, OwnableUpgradeable {\n    // ============ Immutable Variables ============\n\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Variables ============\n\n    // Address of bonded Updater\n    address public updater;\n\n    ISystemMessenger public systemMessenger;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when update is made on Home\n     * or unconfirmed update root is submitted on Replica\n     * @param homeDomain Domain of home contract\n     * @param nonce Nonce of new merkle root\n     * @param root New merkle root\n     * @param signature Updater's signature on `homeDomain`, `nonce` and `root`\n     */\n    // TODO: emit abi encoded update instead?\n    event Update(\n        uint32 indexed homeDomain,\n        uint32 indexed nonce,\n        bytes32 indexed root,\n        bytes signature\n    );\n\n    /**\n     * @notice Emitted when Updater is rotated\n     * @param oldUpdater The address of the old updater\n     * @param newUpdater The address of the new updater\n     */\n    event NewUpdater(address oldUpdater, address newUpdater);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializer ============\n\n    function __SynapseBase_initialize(address _updater) internal onlyInitializing {\n        __Ownable_init();\n        _setUpdater(_updater);\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @dev Modifier for functions that are supposed to be called from\n     * System Contracts on other chains.\n     */\n    modifier onlySystemMessenger() {\n        _assertSystemMessenger();\n        _;\n    }\n\n    // ============ Restricted Functions ============\n\n    function setSystemMessenger(ISystemMessenger _systemMessenger) external onlyOwner {\n        systemMessenger = _systemMessenger;\n    }\n\n    // ============ Internal Functions ============\n\n    function _assertSystemMessenger() internal view {\n        require(msg.sender == address(systemMessenger), \"!systemMessenger\");\n    }\n\n    /**\n     * @notice Hash of domain concatenated with \"SYN\"\n     * @param _domain The domain to hash\n     */\n    function _domainHash(uint32 _domain) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_domain, \"SYN\"));\n    }\n\n    /**\n     * @notice Set the Updater\n     * @param _newUpdater Address of the new Updater\n     */\n    function _setUpdater(address _newUpdater) internal {\n        address _oldUpdater = updater;\n        updater = _newUpdater;\n        emit NewUpdater(_oldUpdater, _newUpdater);\n    }\n\n    /**\n     * @notice Checks that signature was signed by Updater\n     * @param _homeDomain Domain of Home contract where the signing was done\n     * @param _oldRoot Old merkle root\n     * @param _newRoot New merkle root\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\n     * @return TRUE if signature is valid signed by updater\n     **/\n    function _isUpdaterSignature(\n        uint32 _homeDomain,\n        bytes32 _oldRoot,\n        bytes32 _newRoot,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 _digest = keccak256(abi.encodePacked(_domainHash(_homeDomain), _oldRoot, _newRoot));\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\n        return (ECDSA.recover(_digest, _signature) == updater);\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}\n\nlibrary Attestation {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): homeDomain     uint32   4 bytes\n     * [004 .. 008): nonce          uint32   4 bytes\n     * [008 .. 040): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 040): data           bytes   40 bytes (see above)\n     * [040 .. END): signature      bytes   ?? bytes (64/65 bytes)\n     */\n\n    uint256 internal constant OFFSET_HOME_DOMAIN = 0;\n    uint256 internal constant OFFSET_NONCE = 4;\n    uint256 internal constant OFFSET_ROOT = 8;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 40;\n    uint256 internal constant OFFSET_SIGNATURE = ATTESTATION_DATA_LENGTH;\n\n    /**\n     * @notice Returns formatted Attestation with provided fields\n     * @param _data         Attestation Data (see above)\n     * @param _signature    Notary's signature on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(bytes memory _data, bytes memory _signature)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(_data, _signature);\n    }\n\n    /**\n     * @notice Returns formatted Attestation Data with provided fields\n     * @param _domain   Domain of Home's chain\n     * @param _root     New merkle root\n     * @param _nonce    Nonce of the merkle root\n     * @return Formatted data\n     **/\n    function formatAttestationData(\n        uint32 _domain,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_domain, _nonce, _root);\n    }\n\n    /**\n     * @notice Checks that message is an Attestation, by checking its length\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        // Should have non-zero length for signature. Signature validity is not checked.\n        return _view.len() \u003e ATTESTATION_DATA_LENGTH;\n    }\n\n    /**\n     * @notice Returns domain of chain where the Home contract is deployed\n     */\n    function attestationDomain(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_HOME_DOMAIN, 4));\n    }\n\n    /**\n     * @notice Returns nonce of Home contract at the time, when `root` was the Merkle root.\n     */\n    function attestationNonce(bytes29 _view) internal pure returns (uint32) {\n        return uint32(_view.indexUint(OFFSET_NONCE, 4));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Home contract\n     */\n    function attestationRoot(bytes29 _view) internal pure returns (bytes32) {\n        return _view.index(OFFSET_ROOT, 32);\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_HOME_DOMAIN, ATTESTATION_DATA_LENGTH, 0);\n    }\n\n    /**\n     * @notice Returns Notary's signature on AttestationData\n     */\n    function attestationSignature(bytes29 _view) internal pure returns (bytes29) {\n        return _view.slice(OFFSET_SIGNATURE, _view.len() - ATTESTATION_DATA_LENGTH, 0);\n    }\n}\n\nlibrary Auth {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Checks signer is authorized and that their signature is valid.\n     * @param _signer       Who signed the message\n     * @param _data         Data that was signed\n     * @param _signature    `_data` signed by `_signer`, reverts if invalid\n     */\n    function checkSignature(\n        address _signer,\n        bytes29 _data,\n        bytes memory _signature\n    ) internal pure {\n        bytes32 digest = _data.keccak();\n        digest = ECDSA.toEthSignedMessageHash(digest);\n        require((ECDSA.recover(digest, _signature) == _signer), \"Invalid signature\");\n    }\n}\n\nabstract contract AuthManager {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              LIBRARIES                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    using Attestation for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             UPGRADE GAP                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    uint256[50] private __GAP;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice  Checks if the passed payload is a valid Attestation message,\n     *          if the signature is valid and if the signer is an authorized updater.\n     * @param _updater      Signer of the message, needs to be authorized as updater, revert otherwise.\n     * @param _attestation  Attestation of Home merkle root. Needs to be valid, revert otherwise.\n     * @return _view        Memory view on attestation\n     */\n    function _checkUpdaterAuth(address _updater, bytes memory _attestation)\n        internal\n        view\n        returns (bytes29 _view)\n    {\n        _view = _attestation.ref(0);\n        require(_view.isAttestation(), \"Not an attestation\");\n        // This will revert if signature is invalid\n        Auth.checkSignature(\n            _updater,\n            _view.attestationData(),\n            _view.attestationSignature().clone()\n        );\n        require(_isUpdater(_view.attestationDomain(), _updater), \"Signer is not an updater\");\n    }\n\n    function _checkWatchtowerAuth(address _watchtower, bytes memory _report)\n        internal\n        view\n        returns (bytes29 _data)\n    {\n        // TODO: check if _report is valid, once watchtower message standard is finalized\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          VIRTUAL FUNCTIONS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function _isUpdater(uint32 _homeDomain, address _updater) internal view virtual returns (bool);\n\n    function _isWatchtower(address _watchtower) internal view virtual returns (bool);\n}\n\nlibrary QueueLib {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are unsigned integers because the queue can grow only in one direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range (begin, end] which means the first item is at data[begin + 1] and the last item is at\n     * data[end].\n     *\n     * This also means that indices are always greater than zero.\n     */\n    struct Queue {\n        uint128 _begin;\n        uint128 _end;\n        mapping(uint256 =\u003e bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32 value) internal {\n        uint128 backIndex;\n        unchecked {\n            // (begin; end] -\u003e last item is queue._end (insert after that)\n            backIndex = queue._end + 1;\n        }\n        queue._data[backIndex] = value;\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function dequeue(Queue storage queue) internal returns (bytes32 value) {\n        if (isEmpty(queue)) revert Empty();\n        uint128 frontIndex;\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            frontIndex = queue._begin + 1;\n        }\n        value = queue._data[frontIndex];\n        delete queue._data[frontIndex];\n        queue._begin = frontIndex;\n    }\n\n    /**\n     * @dev Batch inserts several items at the end of the queue.\n     *      OZ analog: pushBack\n     */\n    function enqueue(Queue storage queue, bytes32[] memory values) internal {\n        uint128 backIndex = queue._end;\n        uint256 len = values.length;\n        for (uint256 i = 0; i \u003c len; ) {\n            // (begin; end] -\u003e last item is backIndex (insert after that)\n            unchecked {\n                ++backIndex;\n            }\n            queue._data[backIndex] = values[i];\n            unchecked {\n                ++i;\n            }\n        }\n        // backIndex is now pointing to the last inserted item\n        queue._end = backIndex;\n    }\n\n    /**\n     * @dev Batch removes `number` items at the beginning of the queue and returns them.\n     *      OZ analog: popFront\n     * Reverts with `Empty` if `number` \u003e queue length\n     */\n    function dequeue(Queue storage queue, uint256 number)\n        internal\n        returns (bytes32[] memory values)\n    {\n        uint128 frontIndex = queue._begin;\n        unchecked {\n            // This will not underflow assuming all queue operations were done through interface\n            if (number \u003e queue._end - frontIndex) revert Empty();\n        }\n        values = new bytes32[](number);\n        for (uint256 i = 0; i \u003c number; ) {\n            // (begin; end] -\u003e first item is frontIndex + 1\n            unchecked {\n                ++frontIndex;\n            }\n            values[i] = queue._data[frontIndex];\n            delete queue._data[frontIndex];\n            unchecked {\n                ++i;\n            }\n        }\n        // firstIndex is now pointing to the last deleted item\n        queue._begin = frontIndex;\n    }\n\n    function contains(Queue storage queue, bytes32 item) internal view returns (bool) {\n        // Most of the time we'll be checking a merkle root that has been recently added,\n        // so checking from back to front is likely to find it faster.\n        uint128 backIndex = queue._end;\n        uint128 frontIndex = queue._begin;\n        // elements are stored at (begin, end] range,\n        // so we need to start from queue._end\n        // and finish at queue._begin + 1\n        for (; backIndex \u003e frontIndex; ) {\n            if (queue._data[backIndex] == item) return true;\n            unchecked {\n                --backIndex;\n            }\n        }\n        return false;\n    }\n\n    /// @notice Returns last item in queue\n    /// @dev Returns bytes32(0) if queue is empty\n    function lastItem(Queue storage queue) internal view returns (bytes32 item) {\n        // (begin; end] -\u003e last item is queue._end\n        return queue._data[queue._end];\n    }\n\n    /// @notice Returns element at front of queue without removing element\n    /// @dev Reverts if queue is empty\n    function peek(Queue storage queue) internal view returns (bytes32 item) {\n        if (isEmpty(queue)) revert Empty();\n        unchecked {\n            // (begin; end] -\u003e first item is queue._begin + 1\n            item = queue._data[queue._begin + 1];\n        }\n    }\n\n    /// @notice Returns true if queue is empty and false if otherwise\n    function isEmpty(Queue storage queue) internal view returns (bool) {\n        // (begin; end] -\u003e (end \u003c= begin) is empty queue\n        return queue._end \u003c= queue._begin;\n    }\n\n    function length(Queue storage queue) internal view returns (uint256) {\n        // The interface preserves the invariant that begin \u003c= end so we assume this will not overflow.\n        unchecked {\n            return queue._end - queue._begin;\n        }\n    }\n}\n\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        uint256 size = _tree.count;\n        require(size \u003c MAX_LEAVES, \"merkle tree full\");\n\n        unchecked {\n            ++size;\n        }\n        _tree.count = size;\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            if ((size \u0026 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_tree.branch[i], _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i \u003c TREE_DEPTH; ) {\n            uint256 _ithBit = (_index \u003e\u003e i) \u0026 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\nlibrary Tips {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    uint16 internal constant TIPS_VERSION = 1;\n\n    /**\n     * @dev Tips memory layout\n     * [000 .. 002): version            uint16\t 2 bytes\n     * [002 .. 014): updaterTip         uint96\t12 bytes\n     * [014 .. 026): relayerTip         uint96\t12 bytes\n     * [026 .. 038): proverTip          uint96\t12 bytes\n     * [038 .. 050): processorTip       uint96\t12 bytes\n     */\n\n    uint256 internal constant OFFSET_UPDATER = 2;\n    uint256 internal constant OFFSET_RELAYER = 14;\n    uint256 internal constant OFFSET_PROVER = 26;\n    uint256 internal constant OFFSET_PROCESSOR = 38;\n\n    modifier onlyTips(bytes29 _view) {\n        _view.assertType(Message.TIPS_TYPE);\n        _;\n    }\n\n    /**\n     * @notice Returns formatted (packed) tips with provided fields\n     * @param _updaterTip Tip for the Updater\n     * @param _relayerTip Tip for the Relayer\n     * @param _proverTip Tip for the Prover\n     * @param _processorTip Tip for the Processor\n     * @return Formatted tips\n     **/\n    function formatTips(\n        uint96 _updaterTip,\n        uint96 _relayerTip,\n        uint96 _proverTip,\n        uint96 _processorTip\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(TIPS_VERSION, _updaterTip, _relayerTip, _proverTip, _processorTip);\n    }\n\n    /**\n     * @notice Returns formatted empty tips\n     * @return Formatted tips\n     **/\n    function emptyTips() internal pure returns (bytes memory) {\n        return formatTips(0, 0, 0, 0);\n    }\n\n    /// @notice Returns view for the formatted tips\n    /// @dev Providing anything other than formatted tips will lead to unexpected behavior\n    function tipsView(bytes memory _tips) internal pure returns (bytes29) {\n        return _tips.ref(Message.TIPS_TYPE);\n    }\n\n    /// @notice Returns version of formatted tips\n    function tipsVersion(bytes29 _tips) internal pure onlyTips(_tips) returns (uint16) {\n        return uint16(_tips.indexUint(0, 2));\n    }\n\n    /// @notice Returns updaterTip field\n    function updaterTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_UPDATER, 12));\n    }\n\n    /// @notice Returns relayerTip field\n    function relayerTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_RELAYER, 12));\n    }\n\n    /// @notice Returns proverTip field\n    function proverTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROVER, 12));\n    }\n\n    /// @notice Returns processorTip field\n    function processorTip(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return uint32(_tips.indexUint(OFFSET_PROCESSOR, 12));\n    }\n\n    function totalTips(bytes29 _tips) internal pure onlyTips(_tips) returns (uint96) {\n        return updaterTip(_tips) + relayerTip(_tips) + proverTip(_tips) + processorTip(_tips);\n    }\n}\n\nlibrary SystemMessage {\n    using TypedMemView for bytes29;\n\n    enum SystemMessageType {\n        None,\n        Call,\n        Adjust\n    }\n\n    /**\n     * @dev Custom address, used for receiving and sending system messages.\n     *      Home is supposed to dispatch messages from SystemMessenger as if they were sent by this address.\n     *      ReplicaManager is supposed to reroute messages for this address to SystemMessenger.\n     *      Note: all bits except for lower 20 bytes are set to 1.\n     *      Note: TypeCasts.bytes32ToAddress(SYSTEM_SENDER) = address(0)\n     */\n    bytes32 internal constant SYSTEM_SENDER = bytes32(type(uint256).max \u003c\u003c 160);\n\n    /**\n     * @dev SystemMessage memory layout\n     * [000 .. 001): messageType    uint8   1 bytes\n     * [001 .. END]: messageBody    bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_BODY = 1;\n\n    /**\n     * @dev SystemMessageType.Call memory layout\n     * [000 .. 001): recipient      uint8   1 bytes\n     * [001 .. END]: payload        bytes   ? bytes\n     */\n\n    uint256 internal constant OFFSET_CALL_PAYLOAD = 1;\n\n    // TODO: memory layout + setter/getters for SystemMessageType.Adjust\n\n    modifier onlyType(SystemMessageType _type, bytes29 _view) {\n        _view.assertType(uint40(_type));\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSystemMessage(SystemMessageType _messageType, bytes memory _messageBody)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(uint8(_messageType), _messageBody);\n    }\n\n    function formatCall(uint8 _recipientType, bytes memory _payload)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatSystemMessage(SystemMessageType.Call, abi.encodePacked(_recipientType, _payload));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        SYSTEM MESSAGE GETTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function systemMessage(bytes29 _message)\n        internal\n        pure\n        returns (SystemMessageType _messageType, bytes29 _messageView)\n    {\n        _messageType = SystemMessageType(_message.indexUint(0, 1));\n        _messageView = _message.slice(\n            OFFSET_BODY,\n            _message.len() - OFFSET_BODY,\n            uint40(_messageType)\n        );\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                   SYSTEM_MESSAGE_TYPE.CALL GETTERS                   ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function callRecipient(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (uint8)\n    {\n        return uint8(_call.indexUint(0, 1));\n    }\n\n    function callPayload(bytes29 _call)\n        internal\n        pure\n        onlyType(SystemMessageType.Call, _call)\n        returns (bytes29)\n    {\n        return _call.slice(OFFSET_CALL_PAYLOAD, _call.len() - OFFSET_CALL_PAYLOAD, 0);\n    }\n}\n\ncontract MerkleTreeManager {\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    MerkleLib.Tree public tree;\n    bytes32[] public historicalRoots;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[48] private __GAP;\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree (current index)\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Inserts _hash into the Merkle tree and stores the new merkle root.\n     */\n    function _insertHash(bytes32 _hash) internal {\n        tree.insert(_hash);\n        historicalRoots.push(tree.root());\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Home is Version0, MerkleTreeManager, UpdaterStorage, AuthManager {\n    // ============ Libraries ============\n\n    using Attestation for bytes29;\n    using MerkleLib for MerkleLib.Tree;\n\n    using Tips for bytes;\n    using Tips for bytes29;\n\n    // ============ Enums ============\n\n    // States:\n    //   0 - UnInitialized - before initialize function is called\n    //   note: the contract is initialized at deploy time, so it should never be in this state\n    //   1 - Active - as long as the contract has not become fraudulent\n    //   2 - Failed - after a valid fraud proof has been submitted;\n    //   contract will no longer accept updates or new messages\n    enum States {\n        UnInitialized,\n        Active,\n        Failed\n    }\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB\n    // (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    // ============ Public Storage Variables ============\n\n    // domain =\u003e next available nonce for the domain\n    uint32 public nonce;\n    // contract responsible for Updater bonding, slashing and rotation\n    IUpdaterManager public updaterManager;\n    // Current state of contract\n    States public state;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new message is dispatched via Nomad\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\n     *        for the message\n     * @param leafIndex Index of message's leaf in merkle tree\n     * @param destinationAndNonce Destination and destination-specific\n     *        nonce combined in single field ((destination \u003c\u003c 32) \u0026 nonce)\n     * @param tips Tips paid for the remote off-chain agents\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        bytes32 indexed messageHash,\n        uint256 indexed leafIndex,\n        uint64 indexed destinationAndNonce,\n        bytes tips,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when proof of an improper attestation is submitted,\n     * which sets the contract to FAILED state\n     * @param updater       Updater who signed improper attestation\n     * @param attestation   Attestation data and signature\n     */\n    event ImproperAttestation(address updater, bytes attestation);\n\n    /**\n     * @notice Emitted when the Updater is slashed\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\n     * @param updater The address of the updater\n     * @param reporter The address of the entity that reported the updater misbehavior\n     */\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\n\n    /**\n     * @notice Emitted when the UpdaterManager contract is changed\n     * @param updaterManager The address of the new updaterManager\n     */\n    event NewUpdaterManager(address updaterManager);\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) UpdaterStorage(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    // ============ Initializer ============\n\n    function initialize(IUpdaterManager _updaterManager) public initializer {\n        // initialize queue, set Updater Manager, and initialize\n        _setUpdaterManager(_updaterManager);\n        __SynapseBase_initialize(updaterManager.updater());\n        state = States.Active;\n        // insert a historical root so nonces start at 1 rather then 0\n        historicalRoots.push(bytes32(\"\"));\n    }\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Ensures that function is called by the UpdaterManager contract\n     */\n    modifier onlyUpdaterManager() {\n        require(msg.sender == address(updaterManager), \"!updaterManager\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that contract state != FAILED when the function is called\n     */\n    modifier notFailed() {\n        require(state != States.Failed, \"failed state\");\n        _;\n    }\n\n    // ============ External: Updater \u0026 UpdaterManager Configuration  ============\n\n    /**\n     * @notice Set a new Updater\n     * @dev To be set when rotating Updater after Fraud\n     * @param _updater the new Updater\n     */\n    function setUpdater(address _updater) external onlyUpdaterManager {\n        _setUpdater(_updater);\n        // set the Home state to Active\n        // now that Updater has been rotated\n        state = States.Active;\n    }\n\n    /**\n     * @notice Set a new UpdaterManager contract\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\n     * that implements Updater bonding \u0026 slashing, and rules for Updater selection \u0026 rotation\n     * @param _updaterManager the new UpdaterManager contract\n     */\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\n    }\n\n    // ============ External Functions  ============\n\n    /**\n     * @notice Dispatch the message to the destination domain \u0026 recipient\n     * @dev Format the message, insert its hash into Merkle tree,\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        uint32 _optimisticSeconds,\n        bytes memory _tips,\n        bytes memory _messageBody\n    ) external payable notFailed {\n        require(_messageBody.length \u003c= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        require(_tips.tipsView().totalTips() == msg.value, \"!tips\");\n        // get the next nonce for the destination domain, then increment it\n        nonce = nonce + 1;\n        bytes32 _sender = _checkForSystemMessage(_recipientAddress);\n        // format the message into packed bytes\n        bytes memory _header = Header.formatHeader(\n            localDomain,\n            _sender,\n            nonce,\n            _destinationDomain,\n            _recipientAddress,\n            _optimisticSeconds\n        );\n        // format the message into packed bytes\n        bytes memory _message = Message.formatMessage(_header, _tips, _messageBody);\n        // insert the hashed message into the Merkle tree\n        bytes32 _messageHash = keccak256(_message);\n        // new root is added to the historical roots\n        _insertHash(_messageHash);\n        // Emit Dispatch event with message information\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\n        emit Dispatch(\n            _messageHash,\n            count() - 1,\n            _destinationAndNonce(_destinationDomain, nonce),\n            _tips,\n            _message\n        );\n    }\n\n    /**\n     * @notice Suggest an update for the Updater to sign and submit.\n     * @dev If no messages have been sent, null bytes returned for both\n     * @return _nonce Current nonce\n     * @return _root Current merkle root\n     */\n    function suggestUpdate() external view returns (uint32 _nonce, bytes32 _root) {\n        uint256 length = historicalRoots.length;\n        if (length != 0) {\n            _nonce = uint32(length - 1);\n            _root = historicalRoots[_nonce];\n        }\n    }\n\n    /**\n     * @notice Hash of Home domain concatenated with \"SYN\"\n     */\n    function homeDomainHash() external view returns (bytes32) {\n        return _domainHash(localDomain);\n    }\n\n    // ============ Public Functions  ============\n\n    /**\n     * @notice Check if an Attestation is an Improper Attestation;\n     * if so, slash the Updater and set the contract to FAILED state.\n     *\n     * An Improper Attestation is a (_nonce, _root) update that doesn't correspond with\n     * the historical state of Home contract. Either of those needs to be true:\n     * - _nonce is higher than current nonce (no root exists for this nonce)\n     * - _root is not equal to the historical root of _nonce\n     * This would mean that message(s) that were not truly\n     * dispatched on Home were falsely included in the signed root.\n     *\n     * An Improper Attestation will only be accepted as valid by the Replica\n     * If an Improper Attestation is attempted on Home,\n     * the Updater will be slashed immediately.\n     * If an Improper Attestation is submitted to the Replica,\n     * it should be relayed to the Home contract using this function\n     * in order to slash the Updater with an Improper Attestation.\n     *\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\n     * update not current\n     * @param _updater      Updater who signed the attestation\n     * @param _attestation  Attestation data and signature\n     * @return TRUE if update was an Improper Attestation (implying Updater was slashed)\n     */\n    function improperAttestation(address _updater, bytes memory _attestation)\n        public\n        notFailed\n        returns (bool)\n    {\n        // This will revert if signature is not valid\n        bytes29 _view = _checkUpdaterAuth(_updater, _attestation);\n        uint32 _nonce = _view.attestationNonce();\n        bytes32 _root = _view.attestationRoot();\n        // Check if nonce is valid, if not =\u003e update is fraud\n        if (_nonce \u003c historicalRoots.length) {\n            if (_root == historicalRoots[_nonce]) {\n                // Signed (nonce, root) update is valid\n                return false;\n            }\n            // Signed root is not the same as the historical one =\u003e update is fraud\n        }\n        _fail();\n        emit ImproperAttestation(_updater, _attestation);\n        return true;\n    }\n\n    // ============ Internal Functions  ============\n\n    /**\n     * @notice Set the UpdaterManager\n     * @param _updaterManager Address of the UpdaterManager\n     */\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\n        require(Address.isContract(address(_updaterManager)), \"!contract updaterManager\");\n        updaterManager = IUpdaterManager(_updaterManager);\n        emit NewUpdaterManager(address(_updaterManager));\n    }\n\n    /**\n     * @notice Slash the Updater and set contract state to FAILED\n     * @dev Called when fraud is proven (Improper Update or Double Update)\n     */\n    function _fail() internal {\n        // set contract to FAILED\n        state = States.Failed;\n        // slash Updater\n        updaterManager.slashUpdater(payable(msg.sender));\n        emit UpdaterSlashed(updater, msg.sender);\n    }\n\n    /**\n     * @notice Internal utility function that combines\n     * `_destination` and `_nonce`.\n     * @dev Both destination and nonce should be less than 2^32 - 1\n     * @param _destination Domain of destination chain\n     * @param _nonce Current nonce for given destination chain\n     * @return Returns (`_destination` \u003c\u003c 32) \u0026 `_nonce`\n     */\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function _isUpdater(uint32 _homeDomain, address _updater)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        require(_homeDomain == localDomain, \"Wrong domain\");\n        return _updater == updater;\n    }\n\n    function _isWatchtower(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice  Returns \"adjusted\" sender address.\n     * @dev     By default, \"sender address\" is msg.sender.\n     *          However, if SystemMessenger sends a message, specifying SYSTEM_SENDER as the recipient,\n     *          SYSTEM_SENDER is used as \"sender address\" on origin chain.\n     *          Note that transaction will revert if anyone but SystemMessenger uses SYSTEM_SENDER as the recipient.\n     */\n    function _checkForSystemMessage(bytes32 _recipientAddress)\n        internal\n        view\n        returns (bytes32 sender)\n    {\n        if (_recipientAddress != SystemMessage.SYSTEM_SENDER) {\n            sender = TypeCasts.addressToBytes32(msg.sender);\n            /**\n             * @dev Note: SYSTEM_SENDER has highest 12 bytes set,\n             *      whereas TypeCasts.addressToBytes32 sets only the lowest 20 bytes.\n             *      Thus, in this branch: sender != SystemMessage.SYSTEM_SENDER\n             */\n        } else {\n            // Check that SystemMessenger specified SYSTEM_SENDER as recipient, revert otherwise.\n            _assertSystemMessenger();\n            // Adjust \"sender address\" for correct processing on remote chain.\n            sender = SystemMessage.SYSTEM_SENDER;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n// ============ Internal Imports ============\n// ============ External Imports ============\n/**\n * @title UpdaterManager\n * @author Illusory Systems Inc.\n * @notice MVP / centralized version of contract\n * that will manage Updater bonding, slashing,\n * selection and rotation\n */\ncontract UpdaterManager is IUpdaterManager, Ownable {\n    // ============ Public Storage ============\n\n    // address of home contract\n    address public home;\n\n    // ============ Private Storage ============\n\n    // address of the current updater\n    address private _updater;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new home is set\n     * @param home The address of the new home contract\n     */\n    event NewHome(address home);\n\n    /**\n     * @notice Emitted when a new updater is set\n     * @param updater The address of the new updater\n     */\n    event NewUpdater(address updater);\n\n    /**\n     * @notice Emitted when slashUpdater is called\n     */\n    event FakeSlashed(address reporter);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Require that the function is called\n     * by the Home contract\n     */\n    modifier onlyHome() {\n        require(msg.sender == home, \"!home\");\n        _;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _updaterAddress) payable Ownable() {\n        _updater = _updaterAddress;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Set the address of the a new home contract\n     * @dev only callable by trusted owner\n     * @param _home The address of the new home contract\n     */\n    function setHome(address _home) external onlyOwner {\n        require(Address.isContract(_home), \"!contract home\");\n        home = _home;\n\n        emit NewHome(_home);\n    }\n\n    /**\n     * @notice Set the address of a new updater\n     * @dev only callable by trusted owner\n     * @param _updaterAddress The address of the new updater\n     */\n    function setUpdater(address _updaterAddress) external onlyOwner {\n        _updater = _updaterAddress;\n        Home(home).setUpdater(_updaterAddress);\n        emit NewUpdater(_updaterAddress);\n    }\n\n    /**\n     * @notice Slashes the updater\n     * @dev Currently does nothing, functionality will be implemented later\n     * when updater bonding and rotation are also implemented\n     * @param _reporter The address of the entity that reported the updater fraud\n     */\n    function slashUpdater(address payable _reporter) external override onlyHome {\n        emit FakeSlashed(_reporter);\n    }\n\n    /**\n     * @notice Get address of current updater\n     * @return the updater address\n     */\n    function updater() external view override returns (address) {\n        return _updater;\n    }\n\n    /**\n     * @dev should be impossible to renounce ownership;\n     * we override OpenZeppelin Ownable implementation\n     * of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {\n        // do nothing\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"177:60:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"177:60:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;201:33;;233:1;201:33;;;;;186:4:1;174:17;;;156:36;;144:2;129:18;201:33:0;;;;;;","abiDefinition":[{"inputs":[],"name":"VERSION","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/UpdaterManager.sol\":\"Version0\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/UpdaterManager.sol\":{\"keccak256\":\"0xfbcb1bee903026f9cf804eb5e0125ef0ab602a03d1d4464836db6ca4908e4fc0\",\"urls\":[\"bzz-raw://a41d058bf592324ba70cd66abf96b12f5ce4737abce59f1acc677fb9b0db4336\",\"dweb:/ipfs/QmQrwyjnnsDQ2Phs3DpHGtTEHHAkCe6ZupYLrhMkDKD2nE\"]}},\"version\":1}"},"hashes":{"VERSION()":"ffa1ad74"}}}
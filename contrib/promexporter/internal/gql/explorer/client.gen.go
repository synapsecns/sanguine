// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package explorer

import (
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	BridgeTransactions     []*BridgeTransaction      "json:\"bridgeTransactions\" graphql:\"bridgeTransactions\""
	MessageBusTransactions []*MessageBusTransaction  "json:\"messageBusTransactions\" graphql:\"messageBusTransactions\""
	CountByChainID         []*TransactionCountResult "json:\"countByChainId\" graphql:\"countByChainId\""
	CountByTokenAddress    []*TokenCountResult       "json:\"countByTokenAddress\" graphql:\"countByTokenAddress\""
	AddressRanking         []*AddressRanking         "json:\"addressRanking\" graphql:\"addressRanking\""
	AmountStatistic        *ValueResult              "json:\"amountStatistic\" graphql:\"amountStatistic\""
	DailyStatisticsByChain []*DateResultByChain      "json:\"dailyStatisticsByChain\" graphql:\"dailyStatisticsByChain\""
	RankedChainIDsByVolume []*VolumeByChainID        "json:\"rankedChainIDsByVolume\" graphql:\"rankedChainIDsByVolume\""
	AddressData            *AddressData              "json:\"addressData\" graphql:\"addressData\""
	Leaderboard            []*Leaderboard            "json:\"leaderboard\" graphql:\"leaderboard\""
	GetOriginBridgeTx      *BridgeWatcherTx          "json:\"getOriginBridgeTx\" graphql:\"getOriginBridgeTx\""
	GetDestinationBridgeTx *BridgeWatcherTx          "json:\"getDestinationBridgeTx\" graphql:\"getDestinationBridgeTx\""
	GetBlockHeight         []*BlockHeight            "json:\"getBlockHeight\" graphql:\"getBlockHeight\""
}

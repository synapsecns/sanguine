name: Solidity Linting
on:
  pull_request:
  push:
    branches-ignore:
      - 'gh-pages'

jobs:
  changes:
    name: Change Detection
    runs-on: ubuntu-latest
    outputs:
      solidity_change_count: ${{ steps.length.outputs.FILTER_LENGTH }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        name: 'Check for Solidity Changes'
        id: filter_contracts
        with:
          #  make sure to update run-goreleaser when adding a new package here
          filters: |
            contracts: 'packages/contracts-core/**'
      - id: length
        run: |
          export FILTER_LENGTH=$(echo $FILTERED_PATHS | jq '. | length')
          echo "##[set-output name=FILTER_LENGTH;]$(echo $FILTER_LENGTH)"
        env:
          FILTERED_PATHS: ${{ steps.filter_contracts.outputs.changes }}
  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: changes.outputs.solidity_change_count > 0
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvmrc

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: 'Use NodeJS by nvmrc'
        uses: actions/setup-node@v2
        with:
          node-version: '${{steps.nvmrc.outputs.NVMRC}}'

      - name: Initialize Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node Dependencies
        run: yarn install --frozen-lockfile --check-files

      - name: Install dependencies
        run: |
          npx lerna bootstrap

      - name: Run tests # Run tests of all packages
        run: npx lerna exec npm run ci:lint

  test:
    name: Foundry Coverage
    runs-on: ubuntu-latest
    needs: changes
    if: changes.outputs.solidity_change_count > 0
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvmrc

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: 'Use NodeJS by nvmrc'
        uses: actions/setup-node@v2
        with:
          node-version: '${{steps.nvmrc.outputs.NVMRC}}'

      - name: Initialize Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installing dependencies
        working-directory: ./packages/contracts-core
        run: yarn install --frozen-lockfile --check-files

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Foundry Tests
        working-directory: ./packages/contracts-core
        run: forge coverage -vvv --report=lcov

      - name: Run snapshot
        working-directory: ./packages/contracts-core
        run: forge snapshot >> $GITHUB_STEP_SUMMARY

      - uses: codecov/codecov-action@v3
        name: Send Coverage (Codecov)
        with:
          token: ${{ secrets.CODECOV }}
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
          working-directory: ./packages/contracts-core/
          flags: solidity

  slither:
    # see https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/setting-up-code-scanning-for-a-repository
    if: ${{!github.event.repository.private && changes.outputs.solidity_change_count > 0}}
    runs-on: ubuntu-latest
    needs: changes
    permissions:
      # always required
      security-events: write
      # only required for private repos
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvmrc

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: 'Use NodeJS by nvmrc'
        uses: actions/setup-node@v2
        with:
          node-version: '${{steps.nvmrc.outputs.NVMRC}}'

      - name: Initialize Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Node Dependencies
        run: yarn install --frozen-lockfile --check-files

      - name: Install dependencies
        run: |
          npx lerna bootstrap

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build Contracts
        run: |
          npx lerna exec npm run build:slither

      - name: Run Slither
        uses: crytic/slither-action@v0.1.1
        continue-on-error: true
        id: slither
        with:
          node-version: '${{steps.nvmrc.outputs.NVMRC}}'
          target: ./packages/contracts-core
          ignore-compile: true
          sarif: results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./packages/contracts-core/results.sarif
